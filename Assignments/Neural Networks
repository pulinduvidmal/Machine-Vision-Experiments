{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyOvYnUKSnKJhoKd0PNpnysL",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/pulinduvidmal/Machine-Vision-Experiments/blob/main/Assignments/Neural%20Networks\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "VIDMAL H.V.P\n"
      ],
      "metadata": {
        "id": "0_cf9XiqvSqA"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "210668P"
      ],
      "metadata": {
        "id": "M9S734dUvgiS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Github\t-\thttps://github.com/pulinduvidmal/Machine-Vision-Experiments/tree/main/Assignments/Neural%20Networks"
      ],
      "metadata": {
        "id": "QVo7wqNNvhsA"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "cxIFYuPZAqun",
        "outputId": "afc92911-a4b5-43c2-f9b9-c899ecbb0d9c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Using device: cuda\n"
          ]
        }
      ],
      "source": [
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "print(f\"Using device: {device}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " Question 1"
      ],
      "metadata": {
        "id": "NzfTBXIcCAZT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Given code"
      ],
      "metadata": {
        "id": "hNJj_k2TM_3A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        " import torch\n",
        " import torch.nn as nn\n",
        " import torch.optim as optim\n",
        " import torchvision\n",
        " import torchvision.transforms as transforms\n",
        " import matplotlib.pyplot as plt\n",
        "\n",
        " # 1. Dataloading\n",
        " transform = transforms.Compose([\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n",
        " ])\n",
        " batch_size = 50\n",
        " trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)\n",
        " trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size, shuffle=True, num_workers=2)\n",
        " testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)\n",
        " testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size, shuffle=False, num_workers=2)\n",
        " classes = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')\n",
        "\n",
        " # 2. Define Network Parameters\n",
        " Din = 3 * 32 * 32  # Input size (flattened CIFAR-10 image size)\n",
        " K = 10  # Output size (number of classes in CIFAR-10)\n",
        " std = 1e-5\n",
        "\n",
        " # Initialize weights and biases\n",
        " w = torch.randn(Din, K) * std  # One layer: directly map input to output\n",
        " b = torch.zeros(K)\n",
        "\n",
        " # Hyperparameters\n",
        " iterations = 20\n",
        " lr = 2e-6  # Learning rate\n",
        " lr_decay = 0.9  # Learning rate decay\n",
        " reg = 0  # Regularization\n",
        " loss_history = []\n",
        "\n",
        " # 3. Training Loop\n",
        " for t in range(iterations):\n",
        "    running_loss = 0.0\n",
        "    for i, data in enumerate(trainloader, 0):\n",
        "        # Get inputs and labels\n",
        "        inputs, labels = data\n",
        "        Ntr = inputs.shape[0]  # Batch size\n",
        "        x_train = inputs.view(Ntr, -1)  # Flatten input to (Ntr, Din)\n",
        "        y_train_onehot = nn.functional.one_hot(labels, K).float()  # Convert labels to one-hot encoding\n",
        "        # Forward pass\n",
        "        y_pred = x_train.mm(w) + b  # Output layer activation\n",
        "        # Loss calculation (Mean Squared Error with regularization)\n",
        "        loss = (1 / Ntr) * torch.sum((y_pred - y_train_onehot) ** 2) + reg * torch.sum(w ** 2)\n",
        "        loss_history.append(loss.item())\n",
        "        running_loss += loss.item()\n",
        "        # Backpropagation\n",
        "        dy_pred = (2.0 / Ntr) * (y_pred - y_train_onehot)\n",
        "        dw = x_train.t().mm(dy_pred) + reg * w\n",
        "        db = dy_pred.sum(dim=0)\n",
        "        # Parameter update\n",
        "        w -= lr * dw\n",
        "        b -= lr * db\n",
        "    # Print loss for every epoch\n",
        "    if t % 1 == 0:\n",
        "        print(f\"Epoch {t + 1} / {iterations}, Loss: {running_loss / len(trainloader)}\")\n",
        "    # Learning rate decay\n",
        "    lr *= lr_decay\n",
        "\n",
        " # 4. Plotting the Loss History\n",
        " plt.plot(loss_history)\n",
        " plt.title(\"Loss History\")\n",
        " plt.xlabel(\"Iteration\")\n",
        " plt.ylabel(\"Loss\")\n",
        " plt.show()\n",
        "\n",
        " # 5. Calculate Accuracy on Training Set\n",
        " correct_train = 0\n",
        " total_train = 0\n",
        " with torch.no_grad():\n",
        "    for data in trainloader:\n",
        "        inputs, labels = data\n",
        "        Ntr = inputs.shape[0]\n",
        "        x_train = inputs.view(Ntr, -1)\n",
        "        y_train_pred = x_train.mm(w) + b\n",
        "        predicted_train = torch.argmax(y_train_pred, dim=1)\n",
        "        total_train += labels.size(0)\n",
        "        correct_train += (predicted_train == labels).sum().item()\n",
        " train_acc = 100 * correct_train / total_train\n",
        " print(f\"Training accuracy: {train_acc:.2f}%\")\n",
        "\n",
        " # 6. Calculate Accuracy on Test Set\n",
        " correct_test = 0\n",
        " total_test = 0\n",
        " with torch.no_grad():\n",
        "    for data in testloader:\n",
        "        inputs, labels = data\n",
        "        Nte = inputs.shape[0]\n",
        "        x_test = inputs.view(Nte, -1)\n",
        "        y_test_pred = x_test.mm(w) + b\n",
        "        predicted_test = torch.argmax(y_test_pred, dim=1)\n",
        "        total_test += labels.size(0)\n",
        "        correct_test += (predicted_test == labels).sum().item()\n",
        " test_acc = 100 * correct_test / total_test\n",
        " print(f\"Test accuracy: {test_acc:.2f}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 909
        },
        "id": "ZXRbyMOqM_Kv",
        "outputId": "43ccaa1c-1fce-4d08-dd9d-07b88a661f91"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Files already downloaded and verified\n",
            "Files already downloaded and verified\n",
            "Epoch 1 / 20, Loss: 0.9769273951649666\n",
            "Epoch 2 / 20, Loss: 0.9498199351429939\n",
            "Epoch 3 / 20, Loss: 0.9360875483751298\n",
            "Epoch 4 / 20, Loss: 0.9275446828603745\n",
            "Epoch 5 / 20, Loss: 0.9216102967858315\n",
            "Epoch 6 / 20, Loss: 0.9172078065276146\n",
            "Epoch 7 / 20, Loss: 0.9137956157922745\n",
            "Epoch 8 / 20, Loss: 0.9110679520964623\n",
            "Epoch 9 / 20, Loss: 0.9088385291099549\n",
            "Epoch 10 / 20, Loss: 0.9069846845865249\n",
            "Epoch 11 / 20, Loss: 0.9054242988228798\n",
            "Epoch 12 / 20, Loss: 0.9040969612002373\n",
            "Epoch 13 / 20, Loss: 0.9029580265283584\n",
            "Epoch 14 / 20, Loss: 0.9019746145009995\n",
            "Epoch 15 / 20, Loss: 0.9011204718351364\n",
            "Epoch 16 / 20, Loss: 0.9003753411769867\n",
            "Epoch 17 / 20, Loss: 0.8997225344777108\n",
            "Epoch 18 / 20, Loss: 0.8991491733193397\n",
            "Epoch 19 / 20, Loss: 0.8986435873508454\n",
            "Epoch 20 / 20, Loss: 0.8981969069242477\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training accuracy: 32.20%\n",
            "Test accuracy: 32.36%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Modification Code"
      ],
      "metadata": {
        "id": "XatRfy0tNNPo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# 1. Dataloading\n",
        "transform = transforms.Compose([\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n",
        "])\n",
        "batch_size = 50\n",
        "trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)\n",
        "trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size, shuffle=True, num_workers=0)\n",
        "testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)\n",
        "testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size, shuffle=False, num_workers=0)\n",
        "classes = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')\n",
        "\n",
        "# 2. Define Network Parameters\n",
        "Din = 3 * 32 * 32  # Input size (flattened CIFAR-10 image size)\n",
        "H = 100            # Number of nodes in hidden layer\n",
        "K = 10             # Output size (number of classes in CIFAR-10)\n",
        "std = 1e-5\n",
        "\n",
        "# Initialize weights and biases for both layers and move them to the GPU\n",
        "w1 = torch.randn(Din, H, device=device) * std  # Input to hidden layer weights\n",
        "b1 = torch.zeros(H, device=device)             # Bias for hidden layer\n",
        "w2 = torch.randn(H, K, device=device) * std    # Hidden to output layer weights\n",
        "b2 = torch.zeros(K, device=device)             # Bias for output layer\n",
        "\n",
        "# Hyperparameters\n",
        "epochs = 10\n",
        "lr = 1e-3        # Learning rate\n",
        "lr_decay = 0.9   # Learning rate decay\n",
        "reg = 0          # Regularization term\n",
        "loss_history = []\n",
        "train_acc_history = []\n",
        "test_acc_history = []\n",
        "\n",
        "# Define cross-entropy loss function\n",
        "def cross_entropy_loss(y_pred, y_true):\n",
        "    return -torch.sum(y_true * torch.log(y_pred + 1e-9)) / y_true.shape[0]\n",
        "\n",
        "# Sigmoid Activation Function\n",
        "def sigmoid(x):\n",
        "    return 1 / (1 + torch.exp(-x))\n",
        "\n",
        "# 3. Training Loop\n",
        "for epoch in range(epochs):\n",
        "    running_loss = 0.0\n",
        "    correct_train = 0\n",
        "    total_train = 0\n",
        "\n",
        "    for i, data in enumerate(trainloader, 0):\n",
        "        # Get inputs and labels and move them to the GPU\n",
        "        inputs, labels = data[0].to(device), data[1].to(device)\n",
        "        Ntr = inputs.shape[0]  # Batch size\n",
        "        x_train = inputs.view(Ntr, -1)  # Flatten input to (Ntr, Din)\n",
        "        y_train_onehot = nn.functional.one_hot(labels, K).float()  # Convert labels to one-hot encoding\n",
        "\n",
        "        # Forward pass: Layer 1\n",
        "        hidden_layer = torch.sigmoid(x_train.mm(w1) + b1)\n",
        "        # Forward pass: Layer 2 (output layer)\n",
        "        y_pred = torch.softmax(hidden_layer.mm(w2) + b2, dim=1)  # Output layer activation\n",
        "\n",
        "        # Loss calculation (Cross-Entropy Loss with regularization)\n",
        "        loss = cross_entropy_loss(y_pred, y_train_onehot) + reg * (torch.sum(w1**2) + torch.sum(w2**2))\n",
        "        loss_history.append(loss.item())\n",
        "        running_loss += loss.item()\n",
        "\n",
        "        # Backpropagation\n",
        "        dy_pred = y_pred - y_train_onehot\n",
        "        dw2 = hidden_layer.t().mm(dy_pred) + reg * w2\n",
        "        db2 = dy_pred.sum(dim=0)\n",
        "        dhidden = dy_pred.mm(w2.t()) * hidden_layer * (1 - hidden_layer)\n",
        "        dw1 = x_train.t().mm(dhidden) + reg * w1\n",
        "        db1 = dhidden.sum(dim=0)\n",
        "\n",
        "        # Parameter update\n",
        "        w1 -= lr * dw1\n",
        "        b1 -= lr * db1\n",
        "        w2 -= lr * dw2\n",
        "        b2 -= lr * db2\n",
        "\n",
        "        # Calculate training accuracy for the batch\n",
        "        predicted_train = torch.argmax(y_pred, dim=1)\n",
        "        total_train += labels.size(0)\n",
        "        correct_train += (predicted_train == labels).sum().item()\n",
        "\n",
        "    # Calculate and store accuracy for the entire epoch\n",
        "    train_acc = 100 * correct_train / total_train\n",
        "    train_acc_history.append(train_acc)\n",
        "    print(f\"Epoch {epoch + 1}/{epochs}, Loss: {running_loss / len(trainloader):.4f}, Training Accuracy: {train_acc:.2f}%\")\n",
        "\n",
        "    # Learning rate decay\n",
        "    lr *= lr_decay\n",
        "\n",
        "    # Calculate test accuracy for the epoch\n",
        "    correct_test = 0\n",
        "    total_test = 0\n",
        "    with torch.no_grad():\n",
        "        for data in testloader:\n",
        "            inputs, labels = data[0].to(device), data[1].to(device)\n",
        "            Nte = inputs.shape[0]\n",
        "            x_test = inputs.view(Nte, -1)\n",
        "\n",
        "            # Forward pass\n",
        "            hidden_output = sigmoid(x_test.mm(w1) + b1)\n",
        "            y_test_pred = torch.softmax(hidden_output.mm(w2) + b2, dim=1)\n",
        "            predicted_test = torch.argmax(y_test_pred, dim=1)\n",
        "\n",
        "            total_test += labels.size(0)\n",
        "            correct_test += (predicted_test == labels).sum().item()\n",
        "\n",
        "    test_acc = 100 * correct_test / total_test\n",
        "    test_acc_history.append(test_acc)\n",
        "    print(f\"Test Accuracy: {test_acc:.2f}%\")\n",
        "\n",
        "# Plotting the loss, training, and test accuracy over epochs\n",
        "plt.figure(figsize=(12, 4))\n",
        "\n",
        "# Loss plot\n",
        "plt.plot(loss_history, label=\"Training Loss\")\n",
        "plt.xlabel(\"Iteration\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.title(\"Training Loss Over Time\")\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 812
        },
        "id": "1jyvOGiArSrL",
        "outputId": "9cb26595-3ac9-424b-8209-81ed7fca4117"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Files already downloaded and verified\n",
            "Files already downloaded and verified\n",
            "Epoch 1/10, Loss: 2.1610, Training Accuracy: 16.80%\n",
            "Test Accuracy: 25.52%\n",
            "Epoch 2/10, Loss: 1.9035, Training Accuracy: 30.71%\n",
            "Test Accuracy: 34.32%\n",
            "Epoch 3/10, Loss: 1.8025, Training Accuracy: 35.80%\n",
            "Test Accuracy: 36.27%\n",
            "Epoch 4/10, Loss: 1.7453, Training Accuracy: 38.37%\n",
            "Test Accuracy: 39.06%\n",
            "Epoch 5/10, Loss: 1.7055, Training Accuracy: 40.12%\n",
            "Test Accuracy: 40.77%\n",
            "Epoch 6/10, Loss: 1.6766, Training Accuracy: 41.52%\n",
            "Test Accuracy: 41.27%\n",
            "Epoch 7/10, Loss: 1.6544, Training Accuracy: 42.35%\n",
            "Test Accuracy: 42.27%\n",
            "Epoch 8/10, Loss: 1.6366, Training Accuracy: 43.14%\n",
            "Test Accuracy: 42.34%\n",
            "Epoch 9/10, Loss: 1.6209, Training Accuracy: 43.78%\n",
            "Test Accuracy: 42.98%\n",
            "Epoch 10/10, Loss: 1.6070, Training Accuracy: 44.33%\n",
            "Test Accuracy: 43.31%\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x400 with 1 Axes>"
            ],
            "image/png": "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AteuXdMtv3jxomzzhTdp0gRhYWGYNWuWQbf0devW4ezZs+jRoweA/PnCMzMzDbaNiopCYGCgbrs7d+4U6gXQoEEDALDY5T0gIACjRo3C+fPn8fHHHxd6/t9//8XcuXPRpUsXtGjRwuC55557DteuXcOvv/6K48ePG3R1B4A+ffrA09MTEyZMKFQ2QRBw69Yts+VSK3d8TUREJA5b0omIyK21atUKJUqUwKBBg/Duu+9Co9Fg/vz5qupuPn78eGzcuBGtW7fGW2+9hby8PPz444+oU6cOjh07JmofOTk5+OyzzwotL1myJN5++2188cUXePnll9G+fXv0799fNwVbpUqV8N577wEALly4gMcffxz9+vVDrVq14OXlheXLlyM5ORnPP/88AOCPP/7ATz/9hN69eyMqKgrp6en45ZdfEBQUhO7du1ss40cffYSjR4/iiy++wL59+9C3b1/4+/tj9+7d+PPPP1GzZk388ccfhbbr3r07AgMDMWrUKHh6eqJv374Gz0dFReGzzz7DmDFjEBcXh169eiEwMBCXL1/G8uXL8cYbb2DUqFGizqNauONrIiIicRikExGRWwsNDcWaNWvw/vvv45NPPkGJEiXw4osv4vHHH0eXLl2ULh4AoHHjxli3bh1GjRqFsWPHIjIyEhMnTsTZs2dFZZ8H8nsHjB07ttDyqKgovP322xg8eDACAgLw+eef48MPP0SxYsXQu3dvfPHFF7qM7ZGRkejfvz+2bNmC+fPnw8vLC9HR0Vi8eLEuMG7fvj0OHDiARYsWITk5GcHBwWjWrBkWLFiAypUrWyyjp6cnFi9ejHnz5uHXX3/F2LFjkZ2djaioKHz66ad4//33UaxYsULb+fn54amnnsKCBQvQqVMnhIWFFVrno48+QvXq1fHtt99iwoQJutfTuXNnPPXUU6LOodq442siIiLrNIKamhKIiIhIp1evXjh9+jRiYmKULgoRERE5CcekExERqcCDBw8MHsfExGDt2rXo0KGDMgUiIiIiRbAlnYiISAUiIiIwePBgVKlSBfHx8Zg5cyaysrJw9OhRVKtWTeniERERkZNwTDoREZEKdO3aFX/99ReSkpLg6+uLli1bYsqUKQzQiYiIihi2pBMRERERERGpBMekExEREREREakEg3QiIiIiIiIilShyY9K1Wi2uXbuGwMBAaDQapYtDRERE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0rNy87A75iZm77iEz/49i67f7bK6jVju1vCsdEeAs9fT8PSMPdgdc9Pk8+eT0vHb7suYsvac2X3k5Gnx665YnL2e5qhiEhEREREVGWxJdzGDW1fG0w3KoUSxwl3ajfl5Wx4v87/uNdGzflkcib+D3g3Lo/7EjSbX009Y13DSJuz6oCNytQIqhQaYXH/8qjP460CC1fKRISW677/2xyFcvfugUC+IAvezc63u48/98fjs37MAYHIfREREREQkHoN0FyQmQBdDo9GgXvkQ1CsfImm7ttO2AQAm965jcky1swJ0QVC+JdrV3ZYhY//Jq6kylISIiIiIiAB2dyc7/LTtktOPyZjcudxteAERERERkdoxSCedr5+tL2n9q3cfYNYO5wbq7hw0umqmdw2rToiIiIiIZMMgnXQiQvwctu++M/di/v54WffpojEtERERkV3SM3OULgIRORCDdNLxcOAA78PxdzB2xSm79+PObbasdCAiIiJrPltzBnXHb8S28ylKF4WIHIRBOunIEQAfjr8tw17MYyArLybeIyIici2/7r4MAPjcwvSoROTaGKSTjqm51KXqO3OfXdsLVgZm52mVDdNz87To89MejFl2Qpb9qT1IFjNOXu2vgYiIiIjIlTBIJx0ZYnS7/LzzElpM3YKEW/fNrrP0cKLuf2sBvSPsvXQLRxLu4q8DidZXlkiJ12OPG+lZ0CpcaUJERERE5G4YpJNO5VLFFT3+lLXnkJyWhSlrz5pdJ/bGPSeWqLA8FwukHWV3zE00nbwZby04rHRRiIiIiIjciqJB+tSpU9G0aVMEBgYiLCwMvXr1wvnz5y1u88svv6Bt27YoUaIESpQogU6dOuHAgQNOKrF7K1nMB5vea+fw45y+lopeM/Zg76WbumX7Y2/p/teqORCWuWjqn77M9AuevTN/6r0Np5OdWRgiIiIiIrenaJC+Y8cODB06FPv378emTZuQk5ODzp074949862l27dvR//+/bFt2zbs27cPkZGR6Ny5M65everEkruvamUCMeGp2g7bf2ZOHl789T8cS7yLF375T7d876VHQbpxWJh6PwcTVp/GySupZmNkQRDw1p+H8elK+zPIO5Og94p2X7yJ9aeuK1ga26i9moGIiMgdMScMkfvyUvLg69evN3g8d+5chIWF4fDhw2jXznSL7oIFCwwe//rrr/jnn3+w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NsS4ceMAANevX0dCQoJu/Z9//hm5ubkYOnQoIiIidH/Dhw9XpPxEREREREREclK0Jb1Dhw4QBMHs83PnzjV4vH37dscWiIiIiIiIiEhBLjcmnYiIiIiIiMhdMUgnIiIiIiIiUgkG6UREREREREQqwSCdiIiIiIiISCUYpBMRERERERGpBIN0IiIiIiIiIpVgkE5ERERERESkEgzSiYiIiIiIiFSCQToRERERERGRSjBIJyIiIiIiIlIJBulEREREREREKsEgnYiIiIiIiEglGKQTERERERERqQSDdCIiIiIiIiKVYJBOREREREREpBIM0omIiIiIiIhUgkE6ERERERERkUowSCciIiIiIiJSCQbpREREREREJJtgf28AQGgxH4VL4poYpBMREREREZFslrzZEj3qRmDRGy2ULopL8lK6AEREREREROQ+qpcJxIwBjZQuhstiSzoRERERERGRSjBIJyIiIiIiIlIJBulEREREREREKsEgnYiIiIiIiEglGKQTERERERERqQSDdCIiIiIiIiKVYJBOREREREREpBIM0omIiIiIiIhUgkE6ERERERERkUowSCciIiIiIiJSCQbpRERERERERCrhpXQBnE0QBABAWlqawiUhIiIiIiKioqAg/iyIRy0pckF6eno6ACAyMlLhkhAREREREVFRkp6ejuDgYIvraAQxobwb0Wq1uHbtGgIDA6HRaJQujkVpaWmIjIxEYmIigoKClC4OUSG8RknteI2S2vEaJbXjNUpq5yrXqCAISE9PR9myZeHhYXnUeZFrSffw8ED58uWVLoYkQUFBqr7giHiNktrxGiW14zVKasdrlNTOFa5Ray3oBZg4joiIiIiIiEglGKQTERERERERqQSDdBXz9fXFp59+Cl9fX6WLQmQSr1FSO16jpHa8RknteI2S2rnjNVrkEscRERERERERqRVb0omIiIiIiIhUgkE6ERERERERkUowSCciIiIiIiJSCQbpRERERERERCrBIF2lZsyYgUqVKsHPzw/NmzfHgQMHlC4SuaGpU6eiadOmCAwMRFhYGHr16oXz588brJOZmYmhQ4ciNDQUxYsXR9++fZGcnGywTkJCAnr06IGAgACEhYVh9OjRyM3NNVhn+/btaNSoEXx9fVG1alXMnTvX0S+P3NDnn38OjUaDESNG6JbxGiWlXb16FS+++CJC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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "By introducing a middle layer with 100 nodes and a sigmoid activation, along with a cross-entropy loss function, the model's performance improved over 10 epochs. The updated model achieved 44.33% accuracy on the training set and 43.31% on the test set, compared to the original model's accuracy of 32.20% for training and 32.36% for testing."
      ],
      "metadata": {
        "id": "8z23gPl-tQQm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " Question 2"
      ],
      "metadata": {
        "id": "Fq8KLmNWB-_k"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Data loading and transformation\n",
        "transform_pipeline = transforms.Compose([\n",
        "    transforms.Resize((32, 32)),  # LeNet-5 uses 32x32 input\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize((0.5,), (0.5,))\n",
        "])\n",
        "\n",
        "batch_size = 64\n",
        "train_dataset = torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform_pipeline)\n",
        "train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=2)\n",
        "\n",
        "test_dataset = torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform_pipeline)\n",
        "test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size, shuffle=False, num_workers=2)\n",
        "\n",
        "# Define LeNet-5 Model\n",
        "class LeNet5Model(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(LeNet5Model, self).__init__()\n",
        "        self.conv1 = nn.Conv2d(1, 6, kernel_size=5)\n",
        "        self.conv2 = nn.Conv2d(6, 16, kernel_size=5)\n",
        "        self.fc1 = nn.Linear(16 * 5 * 5, 120)\n",
        "        self.fc2 = nn.Linear(120, 84)\n",
        "        self.fc3 = nn.Linear(84, 10)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = torch.tanh(self.conv1(x))        # Output: 6 x 28 x 28\n",
        "        x = torch.max_pool2d(x, 2)           # Output: 6 x 14 x 14\n",
        "        x = torch.tanh(self.conv2(x))        # Output: 16 x 10 x 10\n",
        "        x = torch.max_pool2d(x, 2)           # Output: 16 x 5 x 5\n",
        "        x = x.view(-1, 16 * 5 * 5)           # Flatten\n",
        "        x = torch.tanh(self.fc1(x))\n",
        "        x = torch.tanh(self.fc2(x))\n",
        "        x = self.fc3(x)\n",
        "        return x\n",
        "\n",
        "# Move the model to the selected device\n",
        "lenet_model = LeNet5Model().to(device)\n",
        "\n",
        "# Define the loss function and optimizer\n",
        "loss_function = nn.CrossEntropyLoss()\n",
        "optimizer = optim.Adam(lenet_model.parameters(), lr=0.001)\n",
        "\n",
        "# Training the LeNet-5 Model\n",
        "epochs = 10\n",
        "training_loss_history = []\n",
        "\n",
        "for epoch in range(epochs):\n",
        "    epoch_loss_total = 0.0\n",
        "    for i, batch in enumerate(train_loader, 0):\n",
        "        batch_inputs, batch_labels = batch\n",
        "        batch_inputs, batch_labels = batch_inputs.to(device), batch_labels.to(device)\n",
        "\n",
        "        optimizer.zero_grad()  # Zero the parameter gradients\n",
        "\n",
        "        # Forward pass\n",
        "        predictions = lenet_model(batch_inputs)\n",
        "        loss = loss_function(predictions, batch_labels)\n",
        "\n",
        "        # Backward pass and optimize\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        epoch_loss_total += loss.item()\n",
        "\n",
        "    # Log the loss for this epoch\n",
        "    epoch_avg_loss = epoch_loss_total / len(train_loader)\n",
        "    training_loss_history.append(epoch_avg_loss)\n",
        "    print(f\"Epoch {epoch + 1}/{epochs}, Loss: {epoch_avg_loss:.4f}\")\n",
        "\n",
        "# Plotting the Training Loss History\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(training_loss_history, label='Training Loss')\n",
        "plt.title(\"Training Loss History\")\n",
        "plt.xlabel(\"Epoch\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Calculate Training Accuracy\n",
        "lenet_model.eval()  # Set model to evaluation mode\n",
        "correct_train_preds = 0\n",
        "total_train_samples = 0\n",
        "with torch.no_grad():\n",
        "    for batch in train_loader:\n",
        "        train_images, train_labels = batch\n",
        "        train_images, train_labels = train_images.to(device), train_labels.to(device)\n",
        "        train_outputs = lenet_model(train_images)\n",
        "        _, train_preds = torch.max(train_outputs.data, 1)\n",
        "        total_train_samples += train_labels.size(0)\n",
        "        correct_train_preds += (train_preds == train_labels).sum().item()\n",
        "\n",
        "train_accuracy = 100 * correct_train_preds / total_train_samples\n",
        "print(f\"Training accuracy: {train_accuracy:.2f}%\")\n",
        "\n",
        "# Calculate Test Accuracy\n",
        "correct_test_preds = 0\n",
        "total_test_samples = 0\n",
        "with torch.no_grad():\n",
        "    for batch in test_loader:\n",
        "        test_images, test_labels = batch\n",
        "        test_images, test_labels = test_images.to(device), test_labels.to(device)\n",
        "        test_outputs = lenet_model(test_images)\n",
        "        _, test_preds = torch.max(test_outputs.data, 1)\n",
        "        total_test_samples += test_labels.size(0)\n",
        "        correct_test_preds += (test_preds == test_labels).sum().item()\n",
        "\n",
        "test_accuracy = 100 * correct_test_preds / total_test_samples\n",
        "print(f\"Test accuracy: {test_accuracy:.2f}%\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 715
        },
        "id": "rAe-JFzdLrr_",
        "outputId": "3d11998f-e237-4a4a-b432-d749badf5f97"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10, Loss: 0.2075\n",
            "Epoch 2/10, Loss: 0.0594\n",
            "Epoch 3/10, Loss: 0.0423\n",
            "Epoch 4/10, Loss: 0.0300\n",
            "Epoch 5/10, Loss: 0.0254\n",
            "Epoch 6/10, Loss: 0.0184\n",
            "Epoch 7/10, Loss: 0.0175\n",
            "Epoch 8/10, Loss: 0.0139\n",
            "Epoch 9/10, Loss: 0.0107\n",
            "Epoch 10/10, Loss: 0.0109\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA18AAAHWCAYAAACIZjNQAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABl+ElEQVR4nO3deXiU5dn+8XNmkpns+8YSCJsEWRVCRBSQpAJaK4otWC1LrbYKuKS+FXwVXKrBtVSxolahVXih+Kuo1A3CJhplE6tIWGUnG5AEsk0yM78/kgwMBAgxyZNkvp/jmMOZ+9muianl5L6f6zG5XC6XAAAAAACNymx0AQAAAADgDQhfAAAAANAECF8AAAAA0AQIXwAAAADQBAhfAAAAANAECF8AAAAA0AQIXwAAAADQBAhfAAAAANAECF8AAAAA0AQIXwCABjVx4kQlJCTU69jHHntMJpOpYQvycqtXr5bJZNLq1auNLgUAvB7hCwC8hMlkqtPLW/+QPnHiRAUFBRldxgUNGzZMvXr1qnXb3r17ZTKZ9Pzzz//k6zz99NNaunTpTz4PAOAUH6MLAAA0jbffftvj8z//+U8tX778rPEePXr8pOu88cYbcjqd9Tr2kUce0bRp037S9eFpyJAhKi0tldVqvajjnn76ad1yyy0aPXp04xQGAF6I8AUAXuL222/3+PzVV19p+fLlZ42fqaSkRAEBAXW+jq+vb73qkyQfHx/5+PB/TQ3JbDbLz8/P6DIkScXFxQoMDDS6DAAwDMsOAQBuNUvaNm3apCFDhiggIEAPP/ywJOn999/X9ddfr7Zt28pms6lLly568skn5XA4PM5x5j1fpy+Fe/3119WlSxfZbDYlJSVpw4YNHsfWds+XyWTSlClTtHTpUvXq1Us2m009e/bUJ598clb9q1ev1oABA+Tn56cuXbrotddea/D7yJYsWaL+/fvL399fUVFRuv3223Xo0CGPfbKzszVp0iS1b99eNptNbdq00Y033qi9e/e699m4caNGjBihqKgo+fv7q1OnTvrtb3/bYHXWqO2er507d2rMmDGKi4uTn5+f2rdvr3HjxqmwsFBS1c+8uLhY//jHP9zLUSdOnOg+/ptvvtGoUaMUEhKioKAgpaSk6KuvvvK47vz582UymbRmzRrdc889iomJUfv27bVq1SqZTCa99957Z9W6cOFCmUwmZWZmNvjPAQCaA/56EQDg4ejRoxo1apTGjRun22+/XbGxsZKq/jAdFBSktLQ0BQUFaeXKlZoxY4aKior03HPPXfC8Cxcu1IkTJ/T73/9eJpNJzz77rG6++Wbt2bPngrNl69at07///W/dc889Cg4O1ksvvaQxY8Zo//79ioyMlFQVCEaOHKk2bdro8ccfl8Ph0BNPPKHo6Oif/kOpNn/+fE2aNElJSUlKT09XTk6O/vrXv+qLL77QN998o7CwMEnSmDFjtHXrVk2dOlUJCQnKzc3V8uXLtX//fvfna6+9VtHR0Zo2bZrCwsK0d+9e/fvf/65THQ6HQ/n5+WeNHz9+/ILH2u12jRgxQuXl5Zo6dari4uJ06NAhLVu2TAUFBQoNDdXbb7+t3/3udxo4cKDuuusuSVKXLl0kSVu3btXVV1+tkJAQ/elPf5Kvr69ee+01DRs2TGvWrFFycrLH9e655x5FR0drxowZKi4u1rBhwxQfH68FCxbopptu8th3wYIF6tKliwYNGlSnnwMAtDguAIBXmjx5suvM/xsYOnSoS5Jr7ty5Z+1fUlJy1tjvf/97V0BAgKusrMw9NmHCBFfHjh3dn3/88UeXJFdkZKTr2LFj7vH333/fJcn14Ycfusdmzpx5Vk2SXFar1bVr1y732LfffuuS5Hr55ZfdYzfccIMrICDAdejQIffYzp07XT4+PmedszYTJkxwBQYGnnO73W53xcTEuHr16uUqLS11jy9btswlyTVjxgyXy+VyHT9+3CXJ9dxzz53zXO+9955LkmvDhg0XrOtMNf+Ozvc6/dqrVq1ySXKtWrXK5XK5XN98841LkmvJkiXnvU5gYKBrwoQJZ42PHj3aZbVaXbt373aPHT582BUcHOwaMmSIe2zevHkuSa6rrrrKVVlZ6XGO6dOnu2w2m6ugoMA9lpub6/Lx8XHNnDnzIn4aANCysOwQAODBZrNp0qRJZ437+/u73584cUL5+fm6+uqrVVJSoqysrAued+zYsQoPD3d/vvrqqyVJe/bsueCxqamp7pkXSerTp49CQkLcxzocDq1YsUKjR49W27Zt3ft17dpVo0aNuuD562Ljxo3Kzc3VPffc43EP1fXXX6/ExET95z//kVT1c7JarVq9evU5Z6JqZsiWLVumioqKi64lISFBy5cvP+v1zjvvXPDY0NBQSdKnn36qkpKSi7quw+HQZ599ptGjR6tz587u8TZt2ujXv/611q1bp6KiIo9j7rzzTlksFo+x8ePHq7y8XO+++657bPHixaqsrLzgPYgA0JIRvgAAHtq1a1drZ7ytW7fqpptuUmhoqEJCQhQdHe3+g3LNvULn06FDB4/PNUGsLkvlzjy25viaY3Nzc1VaWqquXbuetV9tY/Wxb98+SVL37t3P2paYmOjebrPZ9Mwzz+jjjz9WbGyshgwZomeffVbZ2dnu/YcOHaoxY8bo8ccfV1RUlG688UbNmzdP5eXldaolMDBQqampZ70GDx58wWM7deqktLQ0/f3vf1dUVJRGjBihV155pU7/DvPy8lRSUlLrz6BHjx5yOp06cODAWdc7U2JiopKSkrRgwQL32IIFC3TFFVc02L8vAGiOCF8AAA+nz3DVKCgo0NChQ/Xtt9/qiSee0Icffqjly5frmWeekaQ6tZY/c/ajhsvlatRjjXD//fdrx44dSk9Pl5+fnx599FH16NFD33zzjaSqhhbvvvuuMjMzNWXKFB06dEi//e1v1b9/f508ebLR63vhhRf03//+Vw8//LBKS0t17733qmfPnjp48GCDX6u23yepavZrzZo1OnjwoHbv3q2vvvqKWS8ArR7hCwBwQatXr9bRo0c1f/583Xffffr5z3+u1NRUj2WERoqJiZGfn5927dp11rbaxuqjY8eOkqTt27eftW379u3u7TW6dOmiP/7xj/rss8/0/fffy26364UXXvDY54orrtBTTz2ljRs3asGCBdq6dasWLVrUIPVeSO/evfXII49o7dq1+vzzz3Xo0CHNnTvXvb22DpHR0dEKCAio9WeQlZUls9ms+Pj4Ol1/3Lhxslgs+r//+z8tWLBAvr6+Gjt2bP2/EAC0AIQvAMAF1cw8nT7TZLfb9be//c2okjxYLBalpqZq6dKlOnz4sHt8165d+vjjjxvkGgMGDFBMTIzmzp3rsTzw448/1rZt23T99ddLqnouWllZmcexXbp0UXBwsPu448ePnzVr169fP0mq89LD+ioqKlJlZaXHWO/evWU2mz2uHRgYqIKCAo/9LBaLrr32Wr3//vsebfNzcnK0cOFCXXXVVQoJCalTHVFRURo1apTeeecdLViwQCNHjlRUVFS9vxcAtAS0mgcAXNCVV16p8PBwTZgwQffee69MJpPefvvtZrXs77HHHtNnn32mwYMH6+6775bD4dCcOXPUq1cvbdmypU7nqKio0J///OezxiMiInTPPffomWee0aRJkzR06FDdeuut7lbzCQkJeuCBByRJO3bsUEpKin71q1/p0ksvlY+Pj9577z3l5ORo3LhxkqR//OMf+tvf/qabbrpJXbp00YkTJ/TGG28oJCRE1113XYP9TGqzcuVKTZkyRb/85S91ySWXqLKyUm+//bYsFovGjBnj3q9///5asWKFXnzxRbVt21adOnVScnKy/vznP2v58uW66qqrdM8998jHx0evvfaaysvL9eyzz15ULePHj9ctt9wiSXryyScb9HsCQHNE+AIAXFBkZKSWLVumP/7xj3rkkUcUHh6u22+/XSkpKRoxYoTR5UmqCgsff/yxHnzwQT366KOKj4/XE088oW3bttWpG6NUNZv36KOPnjXepUsX3XPPPZo4caICAgI0a9YsPfTQQwoMDNRNN92kZ555xt3BMD4+XrfeeqsyMjL09ttvy8fHR4mJifrXv/7lDjdDhw7V+vXrtWjRIuXk5Cg0NFQDBw7UggULam1Q0ZD69u2rESNG6MMPP9ShQ4cUEBCgvn376uOPP9YVV1zh3u/FF1/UXXfdpUceeUSlpaWaMGGCkpOT1bNnT33++eeaPn260tPT5XQ6lZycrHfeeeesZ3xdyA033KDw8HA5nU794he/aOivCgDNjsnVnP7aEgCABjZ69Ght3bpVO3fuNLoUnKGyslJt27bVDTfcoDfffNPocgCg0XHPFwCg1SgtLfX4vHPnTn300UcaNmyYMQXhvJYuXaq8vDyNHz/e6FIAoEkw8wUAaDXatGmjiRMnqnPnztq3b59effVVlZeX65tvvlG3bt2MLg/Vvv76a/33v//Vk08+qaioKG3evNnokgCgSXDPFwCg1Rg5cqT+7//+T9nZ2bLZbBo0aJCefvppglcz8+qrr+qdd95Rv379NH/+fKPLAYAmw8wXAAAAADQB7vkCAAAAgCZA+AIAAACAJsA9X/XkdDp1+PBhBQcHy2QyGV0OAAAAAIO4XC6dOHFCbdu2ldl87vktwlc9HT58WPHx8UaXAQAAAKCZOHDggNq3b3/O7YSvegoODpZU9QMOCQkxuBoAAAAARikqKlJ8fLw7I5wL4aueapYahoSEEL4AAAAAXPB2JBpuAAAAAEATIHwBAAAAQBMgfAEAAABAE+CeLwAAAHg1l8ulyspKORwOo0tBM2WxWOTj4/OTHzFF+AIAAIDXstvtOnLkiEpKSowuBc1cQECA2rRpI6vVWu9zEL4AAADglZxOp3788UdZLBa1bdtWVqv1J89soPVxuVyy2+3Ky8vTjz/+qG7dup33QcrnQ/gCAACAV7Lb7XI6nYqPj1dAQIDR5aAZ8/f3l6+vr/bt2ye73S4/P796nYeGGwAAAPBq9Z3FgHdpiN8TftMAAAAAoAkQvgAAAACgCRC+AAAAACghIUGzZ8+u8/6rV6+WyWRSQUFBo9XU2hC+AAAAgBbEZDKd9/XYY4/V67wbNmzQXXfdVef9r7zySh05ckShoaH1ul5dtaaQR7fDVsLhdMlipjUqAABAa3fkyBH3+8WLF2vGjBnavn27eywoKMj93uVyyeFwyMfnwn/sj46Ovqg6rFar4uLiLuoYb8fMVwt38HiJxr+1Xj97cY1cLpfR5QAAALRoLpdLJfZKQ151/bNcXFyc+xUaGiqTyeT+nJWVpeDgYH388cfq37+/bDab1q1bp927d+vGG29UbGysgoKClJSUpBUrVnic98xlhyaTSX//+9910003KSAgQN26ddMHH3zg3n7mjNT8+fMVFhamTz/9VD169FBQUJBGjhzpERYrKyt17733KiwsTJGRkXrooYc0YcIEjR49ut7/zo4fP67x48crPDxcAQEBGjVqlHbu3Onevm/fPt1www0KDw9XYGCgevbsqY8++sh97G233abo6Gj5+/urW7dumjdvXr1ruRBmvlq4yECbvt5zVOWVTu3IOanuccFGlwQAANBilVY4dOmMTw259g9PjFCAtWH+eD5t2jQ9//zz6ty5s8LDw3XgwAFdd911euqpp2Sz2fTPf/5TN9xwg7Zv364OHTqc8zyPP/64nn32WT333HN6+eWXddttt2nfvn2KiIiodf+SkhI9//zzevvtt2U2m3X77bfrwQcf1IIFCyRJzzzzjBYsWKB58+apR48e+utf/6qlS5fqmmuuqfd3nThxonbu3KkPPvhAISEheuihh3Tdddfphx9+kK+vryZPniy73a61a9cqMDBQP/zwg3t28NFHH9UPP/ygjz/+WFFRUdq1a5dKS0vrXcuFEL5aOH+rRYO7RmllVq4ysnIIXwAAANATTzyhn/3sZ+7PERER6tu3r/vzk08+qffee08ffPCBpkyZcs7zTJw4Ubfeeqsk6emnn9ZLL72k9evXa+TIkbXuX1FRoblz56pLly6SpClTpuiJJ55wb3/55Zc1ffp03XTTTZKkOXPmuGeh6qMmdH3xxRe68sorJUkLFixQfHy8li5dql/+8pfav3+/xowZo969e0uSOnfu7D5+//79uuyyyzRgwABJVbN/jYnw1QoMT4zRyqxcrdyWq3uGdTW6HAAAgBbL39eiH54YYdi1G0pNmKhx8uRJPfbYY/rPf/6jI0eOqLKyUqWlpdq/f/95z9OnTx/3+8DAQIWEhCg3N/ec+wcEBLiDlyS1adPGvX9hYaFycnI0cOBA93aLxaL+/fvL6XRe1PersW3bNvn4+Cg5Odk9FhkZqe7du2vbtm2SpHvvvVd33323PvvsM6WmpmrMmDHu73X33XdrzJgx2rx5s6699lqNHj3aHeIaA/d8tQLDE2MkSZv3H9exYrvB1QAAALRcJpNJAVYfQ14mU8M1TwsMDPT4/OCDD+q9997T008/rc8//1xbtmxR7969Zbef/8+Ovr6+Z/18zheUatvf6L4Ev/vd77Rnzx795je/0XfffacBAwbo5ZdfliSNGjVK+/bt0wMPPKDDhw8rJSVFDz74YKPVQvhqBdqG+atHmxA5XdLq7ef+mwgAAAB4py+++EITJ07UTTfdpN69eysuLk579+5t0hpCQ0MVGxurDRs2uMccDoc2b95c73P26NFDlZWV+vrrr91jR48e1fbt23XppZe6x+Lj4/WHP/xB//73v/XHP/5Rb7zxhntbdHS0JkyYoHfeeUezZ8/W66+/Xu96LoRlh61ESmKMth0pUkZWrm6+vL3R5QAAAKAZ6datm/7973/rhhtukMlk0qOPPlrvpX4/xdSpU5Wenq6uXbsqMTFRL7/8so4fP16nWb/vvvtOwcGn+huYTCb17dtXN954o+6880699tprCg4O1rRp09SuXTvdeOONkqT7779fo0aN0iWXXKLjx49r1apV6tGjhyRpxowZ6t+/v3r27Kny8nItW7bMva0xEL5aieE9YjRn1S6t3Z6nCodTvhYmNQEAAFDlxRdf1G9/+1tdeeWVioqK0kMPPaSioqImr+Ohhx5Sdna2xo8fL4vForvuuksjRoyQxXLh+92GDBni8dlisaiyslLz5s3Tfffdp5///Oey2+0aMmSIPvroI/cSSIfDocmTJ+vgwYMKCQnRyJEj9Ze//EVS1bPKpk+frr1798rf319XX321Fi1a1PBfvJrJZfQizBaqqKhIoaGhKiwsVEhIiNHlyOl0KempFTpabNfCO5N1ZZcoo0sCAABo1srKyvTjjz+qU6dO8vPzM7ocr+R0OtWjRw/96le/0pNPPml0Oed1vt+XumYDpkdaCbPZpGuqG2+s3MZ9XwAAAGh+9u3bpzfeeEM7duzQd999p7vvvls//vijfv3rXxtdWpMgfLUiKTXhK4vwBQAAgObHbDZr/vz5SkpK0uDBg/Xdd99pxYoVjXqfVXPSLMLXK6+8ooSEBPn5+Sk5OVnr168/575vvPGGrr76aoWHhys8PFypqaln7e9yuTRjxgy1adNG/v7+Sk1N1c6dOz32OXbsmG677TaFhIQoLCxMd9xxh06ePNko36+pXNUtSr4Wk/bkF2tPXsv+LgAAAGh94uPj9cUXX6iwsFBFRUX68ssvz7qXqzUzPHwtXrxYaWlpmjlzpjZv3qy+fftqxIgR53x42+rVq3Xrrbdq1apVyszMVHx8vK699lodOnTIvc+zzz6rl156SXPnztXXX3+twMBAjRgxQmVlZe59brvtNm3dulXLly/XsmXLtHbtWt11112N/n0bU7Cfr5I7RUpi9gsAAABobgxvuJGcnKykpCTNmTNHUtVNd/Hx8Zo6daqmTZt2weMdDofCw8M1Z84cjR8/Xi6XS23bttUf//hH9wPSCgsLFRsbq/nz52vcuHHatm2bLr30Um3YsMH99O9PPvlE1113nQ4ePKi2bdte8LrNreFGjbfW/agnlv2gK7tEauGdVxhdDgAAQLNV00AhISFB/v7+RpeDZq60tFR79+5tuQ037Ha7Nm3apNTUVPeY2WxWamqqMjMz63SOkpISVVRUKCIiQpL0448/Kjs72+OcoaGhSk5Odp8zMzNTYWFh7uAlSampqTKbzR4PaDtdeXm5ioqKPF7NUUqPqvu+1v94TEVlFQZXAwAA0HzVtCIvKSkxuBK0BDW/JzW/N/Vh6HO+8vPz5XA4FBsb6zEeGxurrKysOp3joYceUtu2bd1hKzs7232OM89Zsy07O1sxMTEe2318fBQREeHe50zp6el6/PHH61STkTpGBqpLdKB25xXr8x35ur5PG6NLAgAAaJYsFovCwsLct7sEBATU6WG/8C4ul0slJSXKzc1VWFhYnZ5Jdi4t+iHLs2bN0qJFi7R69epGfzbD9OnTlZaW5v5cVFSk+Pj4Rr1mfaX0iNXuvD3KyMohfAEAAJxHXFycJJ2z3wBQIywszP37Ul+Ghq+oqChZLBbl5OR4jOfk5Fzwiz3//POaNWuWVqxYoT59+rjHa47LyclRmzangkdOTo769evn3ufM/4FVVlbq2LFj57yuzWaTzWar83cz0vDEGL2+do9Wb8+Tw+mSxczf4AAAANTGZDKpTZs2iomJUUUFt2ygdr6+vj9pxquGoeHLarWqf//+ysjI0OjRoyVVNdzIyMjQlClTznncs88+q6eeekqffvqpx31bktSpUyfFxcUpIyPDHbaKior09ddf6+6775YkDRo0SAUFBdq0aZP69+8vSVq5cqWcTqeSk5Mb/os2sf4dwxXi56NjxXZtOVCg/h3DjS4JAACgWbNYLA3yh2vgfAxvNZ+WlqY33nhD//jHP7Rt2zbdfffdKi4u1qRJkyRJ48eP1/Tp0937P/PMM3r00Uf11ltvKSEhQdnZ2crOznY/o8tkMun+++/Xn//8Z33wwQf67rvvNH78eLVt29Yd8Hr06KGRI0fqzjvv1Pr16/XFF19oypQpGjduXJ06HTZ3vhazhnavuqctY1vOBfYGAAAA0BQMv+dr7NixysvL04wZM5Sdna1+/frpk08+cTfM2L9/v8zmUxnx1Vdfld1u1y233OJxnpkzZ+qxxx6TJP3pT39ScXGx7rrrLhUUFOiqq67SJ5984nFf2IIFCzRlyhSlpKTIbDZrzJgxeumllxr/CzeRlMQYffjtYa3MytWfRiYaXQ4AAADg9Qx/zldL1Vyf81XjeLFd/f+8XE6XtO6ha9Q+PMDokgAAAIBWqUU85wuNJzzQqgEdq559tiqL7j0AAACA0Qhfrdjw6gcuZxC+AAAAAMMRvlqxlMSq8PXl7qMqsVcaXA0AAADg3QhfrVjXmCDFR/jLXunUF7uOGl0OAAAA4NUIX62YyWRSSmJV18iVWbScBwAAAIxE+GrlhifWPO8rVzS2BAAAAIxD+GrlkjtHKMBqUe6Jcm09XGR0OQAAAIDXIny1cjYfi67uFiWpavYLAAAAgDEIX16A+74AAAAA4xG+vMCwxGhJ0rcHC5V7oszgagAAAADvRPjyAjHBfurbPlSStDorz+BqAAAAAO9E+PISw6uXHq7YxtJDAAAAwAiELy+R0qOq5fy6Xfkqq3AYXA0AAADgfQhfXqJn2xDFhthUYnfo6x+PGV0OAAAA4HUIX17CZDK5H7i8kqWHAAAAQJMjfHmRmpbzGVm5crlcBlcDAAAAeBfClxcZ3DVKNh+zDh4v1c7ck0aXAwAAAHgVwpcX8bdadGWXSElSxrZcg6sBAAAAvAvhy8sM71G19HBlFvd9AQAAAE2J8OVlappubNp3XMeL7QZXAwAAAHgPwpeXaRfmr8S4YDld0podeUaXAwAAAHgNwpcXqnngckYW930BAAAATYXw5YWGV7ecX7M9VxUOp8HVAAAAAN6B8OWF+sWHKSLQqqKySm3ad9zocgAAAACvQPjyQhazScO6R0uSVrL0EAAAAGgShC8vlVK99HDFNlrOAwAAAE2B8OWlrr4kSj5mk/bkFevH/GKjywEAAABaPcKXlwrx89XAThGSWHoIAAAANAXClxereeDyyiyWHgIAAACNjfDlxVJ7VN339fWeYzpRVmFwNQAAAEDrRvjyYglRgeocHahKp0uf78w3uhwAAACgVSN8ebmU6qWHGdu47wsAAABoTIQvLze8uuX86u25cjhdBlcDAAAAtF6Gh69XXnlFCQkJ8vPzU3JystavX3/Ofbdu3aoxY8YoISFBJpNJs2fPPmufmm1nviZPnuzeZ9iwYWdt/8Mf/tAYX6/ZG5AQrmA/Hx0ttuvbgwVGlwMAAAC0WoaGr8WLFystLU0zZ87U5s2b1bdvX40YMUK5ubUvgSspKVHnzp01a9YsxcXF1brPhg0bdOTIEfdr+fLlkqRf/vKXHvvdeeedHvs9++yzDfvlWghfi1lDL4mWJK1k6SEAAADQaAwNXy+++KLuvPNOTZo0SZdeeqnmzp2rgIAAvfXWW7Xun5SUpOeee07jxo2TzWardZ/o6GjFxcW5X8uWLVOXLl00dOhQj/0CAgI89gsJCWnw79dSpPSovu+L530BAAAAjcaw8GW327Vp0yalpqaeKsZsVmpqqjIzMxvsGu+8845++9vfymQyeWxbsGCBoqKi1KtXL02fPl0lJSXnPVd5ebmKioo8Xq3F0EtiZDZJ244U6XBBqdHlAAAAAK2SYeErPz9fDodDsbGxHuOxsbHKzs5ukGssXbpUBQUFmjhxosf4r3/9a73zzjtatWqVpk+frrffflu33377ec+Vnp6u0NBQ9ys+Pr5BamwOIgKturxDuCRpJbNfAAAAQKPwMbqAxvTmm29q1KhRatu2rcf4XXfd5X7fu3dvtWnTRikpKdq9e7e6dOlS67mmT5+utLQ09+eioqJWFcCG94jRxn3HtTIrV7df0dHocgAAAIBWx7CZr6ioKFksFuXk5HiM5+TknLOZxsXYt2+fVqxYod/97ncX3Dc5OVmStGvXrnPuY7PZFBIS4vFqTVKqW85/sStfpXaHwdUAAAAArY9h4ctqtap///7KyMhwjzmdTmVkZGjQoEE/+fzz5s1TTEyMrr/++gvuu2XLFklSmzZtfvJ1W6pLYoPULsxf5ZVOfbEr3+hyAAAAgFbH0G6HaWlpeuONN/SPf/xD27Zt0913363i4mJNmjRJkjR+/HhNnz7dvb/dbteWLVu0ZcsW2e12HTp0SFu2bDlrxsrpdGrevHmaMGGCfHw8V1bu3r1bTz75pDZt2qS9e/fqgw8+0Pjx4zVkyBD16dOn8b90M2Uymeh6CAAAADQiQ+/5Gjt2rPLy8jRjxgxlZ2erX79++uSTT9xNOPbv3y+z+VQ+PHz4sC677DL35+eff17PP/+8hg4dqtWrV7vHV6xYof379+u3v/3tWde0Wq1asWKFZs+ereLiYsXHx2vMmDF65JFHGu+LthDDE2P0z8x9WpmVI5er11kdIgEAAADUn8nlcrmMLqIlKioqUmhoqAoLC1vN/V9lFQ5d/uRyldgdWjb1KvVqF2p0SQAAAECzV9dsYOiyQzQvfr4WXdU1ShIt5wEAAICGRviCB+77AgAAABoH4QseruleFb6+PVCgvBPlBlcDAAAAtB6EL3iICfFTn/ZV93qt2s7sFwAAANBQCF84y/DEqtmvldsIXwAAAEBDIXzhLCmJVa3+P9+Zp/JKh8HVAAAAAK0D4Qtn6dk2RDHBNhXbHVr/4zGjywEAAABaBcIXzmI2m9xLDzNYeggAAAA0CMIXauUOX1k54jncAAAAwE9H+EKtBneNktXHrAPHSrU776TR5QAAAAAtHuELtQq0+WhQ50hJ0gqWHgIAAAA/GeEL55TSg5bzAAAAQEMhfOGcruleFb427jumghK7wdUAAAAALRvhC+cUHxGg7rHBcrqkNTvyjC4HAAAAaNEIXzivmqWHtJwHAAAAfhrCF86rJnyt3p6rSofT4GoAAACAlovwhfPqFx+u8ABfFZVVatO+40aXAwAAALRYhC+cl8VscjfeWJnF0kMAAACgvghfuKDhNfd9Eb4AAACAeiN84YKu7hYtH7NJu3JPat/RYqPLAQAAAFokwhcuKNTfV0kJEZJYeggAAADUF+ELdVLT9ZDwBQAAANQP4Qt1MjyxKnx9teeoTpZXGlwNAAAA0PIQvlAnnaOD1CkqUBUOl9btzDO6HAAAAKDFIXyhzmpmv1ZsY+khAAAAcLEIX6izlOrwtSorV06ny+BqAAAAgJaF8IU6G5AQoWCbj44W2/XtwQKjywEAAABaFMIX6szqY9aQS6Il0fUQAAAAuFiEL1yUmpbzGdz3BQAAAFwUwhcuyrDuMTKZpB+OFOlIYanR5QAAAAAtBuELFyUi0KrLO4RLYukhAAAAcDEIX7hoNS3nV7L0EAAAAKgzwhcuWs19X+t25avU7jC4GgAAAKBlIHzhonWPDVa7MH+VVzqVuSff6HIAAACAFsHw8PXKK68oISFBfn5+Sk5O1vr168+579atWzVmzBglJCTIZDJp9uzZZ+3z2GOPyWQyebwSExM99ikrK9PkyZMVGRmpoKAgjRkzRjk5OQ391Votk8nkXnpI10MAAACgbgwNX4sXL1ZaWppmzpypzZs3q2/fvhoxYoRyc2v/A31JSYk6d+6sWbNmKS4u7pzn7dmzp44cOeJ+rVu3zmP7Aw88oA8//FBLlizRmjVrdPjwYd18880N+t1au+HVSw9XZuXK5XIZXA0AAADQ/PkYefEXX3xRd955pyZNmiRJmjt3rv7zn//orbfe0rRp087aPykpSUlJSZJU6/YaPj4+5wxnhYWFevPNN7Vw4UINHz5ckjRv3jz16NFDX331la644opajysvL1d5ebn7c1FRUd2+ZCs1qHOk/H0tOlJYpm1HTujStiFGlwQAAAA0a4bNfNntdm3atEmpqamnijGblZqaqszMzJ907p07d6pt27bq3LmzbrvtNu3fv9+9bdOmTaqoqPC4bmJiojp06HDe66anpys0NNT9io+P/0k1tnR+vhYN7holSVqZxZJNAAAA4EIMC1/5+flyOByKjY31GI+NjVV2dna9z5ucnKz58+frk08+0auvvqoff/xRV199tU6cOCFJys7OltVqVVhY2EVdd/r06SosLHS/Dhw4UO8aW4uarocruO8LAAAAuCBDlx02hlGjRrnf9+nTR8nJyerYsaP+9a9/6Y477qj3eW02m2w2W0OU2Gpc070qfH17sEB5J8oVHczPBwAAADgXw2a+oqKiZLFYzuoymJOTc95mGhcrLCxMl1xyiXbt2iVJiouLk91uV0FBQaNe1xvEhfqpV7sQuVzS6u3MfgEAAADnY1j4slqt6t+/vzIyMtxjTqdTGRkZGjRoUINd5+TJk9q9e7fatGkjSerfv798fX09rrt9+3bt37+/Qa/rLYYnVi0bXZlF+AIAAADOx9Blh2lpaZowYYIGDBiggQMHavbs2SouLnZ3Pxw/frzatWun9PR0SVVNOn744Qf3+0OHDmnLli0KCgpS165dJUkPPvigbrjhBnXs2FGHDx/WzJkzZbFYdOutt0qSQkNDdccddygtLU0REREKCQnR1KlTNWjQoHN2OsS5pfaI0UsZO7V2R57slU5ZfQx/dBwAAADQLBkavsaOHau8vDzNmDFD2dnZ6tevnz755BN3E479+/fLbD71h/nDhw/rsssuc39+/vnn9fzzz2vo0KFavXq1JOngwYO69dZbdfToUUVHR+uqq67SV199pejoaPdxf/nLX2Q2mzVmzBiVl5drxIgR+tvf/tY0X7qV6dU2VNHBNuWdKNf6H4/pqm5RRpcEAAAANEsmF0/IrZeioiKFhoaqsLBQISHe/Yyrh979rxZvPKBJgxM084aeRpcDAAAANKm6ZgPWiOEnG17dcj5jW67I8gAAAEDtCF/4ya7qGiWrxaz9x0q0O6/Y6HIAAACAZonwhZ8s0OajK7pESpJWZuVcYG8AAADAOxG+0CBSEk8tPQQAAABwNsIXGsTw6vC1cd9xFZZUGFwNAAAA0PwQvtAg4iMCdElskBxOl9bszDO6HAAAAKDZIXyhwQxPrHo+28pt3PcFAAAAnInwhQaTUt1yftX2PFU6nAZXAwAAADQvhC80mMviwxQW4KvC0gpt3l9gdDkAAABAs0L4QoPxsZg17JJoSVIGLecBAAAAD4QvNKjhPWru+6LlPAAAAHA6whca1NBu0bKYTdqZe1L7j5YYXQ4AAADQbBC+0KBCA3yVlBAuSVrJ0kMAAADAjfCFBpdS3XI+I4ulhwAAAEANwhca3PDqlvNf7zmmk+WVBlcDAAAANA+ELzS4zlGBSogMkN3h1Lqd+UaXAwAAADQLhC80OJPJpOHVSw+57wsAAACoQvhCo0ipXnq4MitPTqfL4GoAAAAA4xG+0CiSEiIUZPNR/slyfXeo0OhyAAAAAMMRvtAorD5mDbkkShJdDwEAAACJ8IVGxH1fAAAAwCmELzSaYd2jZTJJ3x8qUnZhmdHlAAAAAIYifKHRRAXZ1C8+TJK0kqWHAAAA8HKELzSqlMSarocsPQQAAIB3I3yhUdXc97VuV77KKhwGVwMAAAAYh/CFRtWjTbDahvqprMKpzN1HjS4HAAAAMAzhC43KZDJpePUDlzNYeggAAAAvRvhCo0upaTm/LVcul8vgagAAAABjEL7Q6AZ1iZSfr1mHC8uUlX3C6HIAAAAAQxC+0Oj8fC26qmuUJFrOAwAAwHsRvtAkaroeZmzjvi8AAAB4J8IXmsTw6ud9fXOgQEdPlhtcDQAAAND0CF9oEnGhfurZNkQul7R6e57R5QAAAABNzvDw9corryghIUF+fn5KTk7W+vXrz7nv1q1bNWbMGCUkJMhkMmn27Nln7ZOenq6kpCQFBwcrJiZGo0eP1vbt2z32GTZsmEwmk8frD3/4Q0N/NZwhpXr2i/u+AAAA4I0MDV+LFy9WWlqaZs6cqc2bN6tv374aMWKEcnNr/8N5SUmJOnfurFmzZikuLq7WfdasWaPJkyfrq6++0vLly1VRUaFrr71WxcXFHvvdeeedOnLkiPv17LPPNvj3g6fhParu+1q7I0/2SqfB1QAAAABNy8fIi7/44ou68847NWnSJEnS3Llz9Z///EdvvfWWpk2bdtb+SUlJSkpKkqRat0vSJ5984vF5/vz5iomJ0aZNmzRkyBD3eEBAwDkDHBpHn3ahigqyKv+kXRv3HtOV1R0QAQAAAG9g2MyX3W7Xpk2blJqaeqoYs1mpqanKzMxssOsUFhZKkiIiIjzGFyxYoKioKPXq1UvTp09XSUnJec9TXl6uoqIijxcujtls0jXdq5YertjG0kMAAAB4F8PCV35+vhwOh2JjYz3GY2NjlZ2d3SDXcDqduv/++zV48GD16tXLPf7rX/9a77zzjlatWqXp06fr7bff1u23337ec6Wnpys0NNT9io+Pb5AavU1Kj6rwlZGVI5fLZXA1AAAAQNMxdNlhY5s8ebK+//57rVu3zmP8rrvucr/v3bu32rRpo5SUFO3evVtdunSp9VzTp09XWlqa+3NRUREBrB6u6hYtX4tJ+46WaE9+sbpEBxldEgAAANAkDJv5ioqKksViUU6O50N3c3JyGuRerClTpmjZsmVatWqV2rdvf959k5OTJUm7du065z42m00hISEeL1y8IJuPrugcKUlaydJDAAAAeBHDwpfValX//v2VkZHhHnM6ncrIyNCgQYPqfV6Xy6UpU6bovffe08qVK9WpU6cLHrNlyxZJUps2bep9XdRdTcv5jKycC+wJAAAAtB6GLjtMS0vThAkTNGDAAA0cOFCzZ89WcXGxu/vh+PHj1a5dO6Wnp0uqatLxww8/uN8fOnRIW7ZsUVBQkLp27SqpaqnhwoUL9f777ys4ONh9/1hoaKj8/f21e/duLVy4UNddd50iIyP13//+Vw888ICGDBmiPn36GPBT8D7DE2P12Ic/aMPe4yosrVCov6/RJQEAAACNzuQyuOvBnDlz9Nxzzyk7O1v9+vXTSy+95F4GOGzYMCUkJGj+/PmSpL1799Y6kzV06FCtXr1akmQymWq9zrx58zRx4kQdOHBAt99+u77//nsVFxcrPj5eN910kx555JGLWkpYVFSk0NBQFRYWsgSxHn724hrtzD2pl2+9TDf0bWt0OQAAAEC91TUbGB6+WirC10+T/vE2vbZmj266rJ3+Mraf0eUAAAAA9VbXbGDYPV/wbimJVY8YWLU9Vw4n+R8AAACtH+ELhri8Q5hC/X1VUFKhb/YfN7ocAAAAoNERvmAIH4tZw7pHS5Iysmg5DwAAgNaP8AXDDK9uOc/zvgAAAOANCF8wzNBLomUxm7Q954QOHCsxuhwAAACgURG+YJiwAKv6dwyXVNV4AwAAAGjNCF8wVEr10sMVLD0EAABAK0f4gqFSelSFr692H1VxeaXB1QAAAACNh/AFQ3WJDlKHiADZHU6t25VvdDkAAABAoyF8wVAmk4muhwAAAPAK9QpfBw4c0MGDB92f169fr/vvv1+vv/56gxUG71Gz9HDl9lw5nS6DqwEAAAAaR73C169//WutWrVKkpSdna2f/exnWr9+vf73f/9XTzzxRIMWiNYvuVOkAq0W5Z0o1/eHC40uBwAAAGgU9Qpf33//vQYOHChJ+te//qVevXrpyy+/1IIFCzR//vyGrA9ewOpj1pBLoiVJGSw9BAAAQCtVr/BVUVEhm80mSVqxYoV+8YtfSJISExN15MiRhqsOXsN931cW4QsAAACtU73CV8+ePTV37lx9/vnnWr58uUaOHClJOnz4sCIjIxu0QHiHYd1jZDJJ3x0qVE5RmdHlAAAAAA2uXuHrmWee0WuvvaZhw4bp1ltvVd++fSVJH3zwgXs5InAxooNt6ts+TJK0itkvAAAAtEI+9Tlo2LBhys/PV1FRkcLDw93jd911lwICAhqsOHiXlMQYbTlQoIysXI0b2MHocgAAAIAGVa+Zr9LSUpWXl7uD1759+zR79mxt375dMTExDVogvMfw6pbz63bmq6zCYXA1AAAAQMOqV/i68cYb9c9//lOSVFBQoOTkZL3wwgsaPXq0Xn311QYtEN7j0jYhigvxU2mFQ1/tOWp0OQAAAECDqlf42rx5s66++mpJ0rvvvqvY2Fjt27dP//znP/XSSy81aIHwHiaTyT37RddDAAAAtDb1Cl8lJSUKDg6WJH322We6+eabZTabdcUVV2jfvn0NWiC8S0p1y/mMbblyuVwGVwMAAAA0nHqFr65du2rp0qU6cOCAPv30U1177bWSpNzcXIWEhDRogfAuV3aJks3HrEMFpdqec8LocgAAAIAGU6/wNWPGDD344INKSEjQwIEDNWjQIElVs2CXXXZZgxYI7+JvtWhw1yhJVbNfAAAAQGtRr/B1yy23aP/+/dq4caM+/fRT93hKSor+8pe/NFhx8E7DE7nvCwAAAK1PvZ7zJUlxcXGKi4vTwYMHJUnt27fnActoEDXha/P+4zpWbFdEoNXgigAAAICfrl4zX06nU0888YRCQ0PVsWNHdezYUWFhYXryySfldDobukZ4mbZh/rq0TYhcLmn1dma/AAAA0DrUa+brf//3f/Xmm29q1qxZGjx4sCRp3bp1euyxx1RWVqannnqqQYuE90npEaMfjhQpIytXN1/e3uhyAAAAgJ+sXuHrH//4h/7+97/rF7/4hXusT58+ateune655x7CF36y4YkxennlLq3dnqcKh1O+lnpN0gIAAADNRr3+RHvs2DElJiaeNZ6YmKhjx4795KKAvu3DFBlo1YnySm3Yy+8UAAAAWr56ha++fftqzpw5Z43PmTNHffr0+clFAWazSdfUdD2k5TwAAABagXotO3z22Wd1/fXXa8WKFe5nfGVmZurAgQP66KOPGrRAeK+UxBi9u+mgVmbl6pGfX2p0OQAAAMBPUq+Zr6FDh2rHjh266aabVFBQoIKCAt18883aunWr3n777YauEV7qqm5R8rWYtCe/WHvyThpdDgAAAPCTmFwul6uhTvbtt9/q8ssvl8PhaKhTNltFRUUKDQ1VYWGhQkJCjC6n1br9719r3a58PXJ9D/3u6s5GlwMAAACcpa7ZgBZyaNZqHri8Mov7vgAAANCyGR6+XnnlFSUkJMjPz0/Jyclav379OffdunWrxowZo4SEBJlMJs2ePbte5ywrK9PkyZMVGRmpoKAgjRkzRjk5OQ35tdBAUnpUha/1Px5TUVmFwdUAAAAA9Wdo+Fq8eLHS0tI0c+ZMbd68WX379tWIESOUm1v7LEdJSYk6d+6sWbNmKS4urt7nfOCBB/Thhx9qyZIlWrNmjQ4fPqybb765Ub4jfpqOkYHqEh2oSqdLa3fkGV0OAAAAUG8Xdc/XhQJKQUGB1qxZU+d7vpKTk5WUlORuW+90OhUfH6+pU6dq2rRp5z02ISFB999/v+6///6LOmdhYaGio6O1cOFC3XLLLZKkrKws9ejRQ5mZmbriiitqvV55ebnKy8vdn4uKihQfH889X03g6Y+26fW1e3TzZe304th+RpcDAAAAeGiUe75CQ0PP++rYsaPGjx9fp3PZ7XZt2rRJqampp4oxm5WamqrMzMyLKeuizrlp0yZVVFR47JOYmKgOHTqc97rp6eke3zU+Pr5eNeLi1dz3tWp7rhzOBusPAwAAADSpi3rO17x58xrswvn5+XI4HIqNjfUYj42NVVZWVqOdMzs7W1arVWFhYWftk52dfc5zT58+XWlpae7PNTNfaHz9O4YrxM9Hx0sqtOXAcfXvGGF0SQAAAMBFM7zhRkths9kUEhLi8ULT8LWYNax71exXxja6HgIAAKBlMix8RUVFyWKxnNVlMCcn55zNNBrinHFxcbLb7SooKGiw66Lx1XQ9pOU8AAAAWirDwpfValX//v2VkZHhHnM6ncrIyNCgQYMa7Zz9+/eXr6+vxz7bt2/X/v37631dNL6hl0TLbJKysk/o4PESo8sBAAAALtpF3fPV0NLS0jRhwgQNGDBAAwcO1OzZs1VcXKxJkyZJksaPH6927dopPT1dUlVDjR9++MH9/tChQ9qyZYuCgoLUtWvXOp0zNDRUd9xxh9LS0hQREaGQkBBNnTpVgwYNOmenQxgvLMCqAR0jtH7vMa3KytVvBiUYXRIAAABwUQwNX2PHjlVeXp5mzJih7Oxs9evXT5988om7Ycb+/ftlNp+anDt8+LAuu+wy9+fnn39ezz//vIYOHarVq1fX6ZyS9Je//EVms1ljxoxReXm5RowYob/97W9N86VRb8N7xGj93mPKIHwBAACgBbqo53zhlLr28kfD2ZlzQj/7y1pZfczaMuNnCrAa+ncHAAAAgKRGes4XYKSuMUGKj/CXvdKpL3YdNbocAAAA4KIQvtBimEwmpSRWLR9dmZVzgb0BAACA5oXwhRZleOKp532xYhYAAAAtCeELLUpy5wgFWC3KPVGurYeLjC4HAAAAqDPCF1oUm49FV3eLkiSt2MbSQwAAALQchC+0OKfu+8o1uBIAAACg7ghfaHGGJUZLkv57sFC5RWUGVwMAAADUDeELLU5MsJ/6tg+VJK3azuwXAAAAWgbCF1qk4dVLDzO2Eb4AAADQMhC+0CKl9KhqOb9uV77KKhwGVwMAAABcGOELLVLPtiGKDbGpxO7Q1z8eM7ocAAAA4IIIX2iRTCaTe+nhSlrOAwAAoAUgfKHFSkmsWnqYkZUrl8tlcDUAAADA+RG+0GIN7holm49ZB4+XamfuSaPLAQAAAM6L8IUWy99q0ZVdIiXR9RAAAADNH+ELLdrwHtX3fWVx3xcAAACaN8IXWrTh1fd9bdp3XMeL7QZXAwAAAJwb4QstWrswfyXGBcvpktbsyDO6HAAAAOCcCF9o8WoeuLyClvMAAABoxghfaPFqnve1ZkeeKhxOg6sBAAAAakf4QovXLz5MEYFWnSir1Ma9x40uBwAAAKgV4QstnsVs0rDu0ZLoeggAAIDmi/CFViGleulhRhbP+wIAAEDzRPhCqzDkkij5mE3ak1esH/OLjS4HAAAAOAvhC61CsJ+vkjtHSJJWMvsFAACAZojwhVajpush930BAACgOSJ8odVISax63tfXe47pRFmFwdUAAAAAnghfaDUSogLVOTpQlU6XPt+Zb3Q5AAAAgAfCF1qVmtmvjG3c9wUAAIDmhfCFVqXmvq/V23PlcLoMrgYAAAA4hfCFVmVAQriC/Xx0tNiubw8WGF0OAAAA4Eb4QqviazFr6CXRkqSVLD0EAABAM0L4QquT0qPqvq8V22g5DwAAgOajWYSvV155RQkJCfLz81NycrLWr19/3v2XLFmixMRE+fn5qXfv3vroo488tptMplpfzz33nHufhISEs7bPmjWrUb4fmtbQS2JkNklZ2Sd0qKDU6HIAAAAASc0gfC1evFhpaWmaOXOmNm/erL59+2rEiBHKza19ydiXX36pW2+9VXfccYe++eYbjR49WqNHj9b333/v3ufIkSMer7feeksmk0ljxozxONcTTzzhsd/UqVMb9buiaUQEWnV5h3BJ0soslh4CAACgeTA8fL344ou68847NWnSJF166aWaO3euAgIC9NZbb9W6/1//+leNHDlS//M//6MePXroySef1OWXX645c+a494mLi/N4vf/++7rmmmvUuXNnj3MFBwd77BcYGNio3xVNZ3j10sOVLD0EAABAM2Fo+LLb7dq0aZNSU1PdY2azWampqcrMzKz1mMzMTI/9JWnEiBHn3D8nJ0f/+c9/dMcdd5y1bdasWYqMjNRll12m5557TpWVleestby8XEVFRR4vNF8p1S3nv9h9VCX2c/97BQAAAJqKoeErPz9fDodDsbGxHuOxsbHKzs6u9Zjs7OyL2v8f//iHgoODdfPNN3uM33vvvVq0aJFWrVql3//+93r66af1pz/96Zy1pqenKzQ01P2Kj4+vy1eEQS6JDVL7cH/ZK536ctdRo8sBAAAAjF922Njeeust3XbbbfLz8/MYT0tL07Bhw9SnTx/94Q9/0AsvvKCXX35Z5eXltZ5n+vTpKiwsdL8OHDjQFOWjnkwmk1ISq5YeZnDfFwAAAJoBQ8NXVFSULBaLcnI878vJyclRXFxcrcfExcXVef/PP/9c27dv1+9+97sL1pKcnKzKykrt3bu31u02m00hISEeLzRvw3tUzZCuzMqRy+UyuBoAAAB4O0PDl9VqVf/+/ZWRkeEeczqdysjI0KBBg2o9ZtCgQR77S9Ly5ctr3f/NN99U//791bdv3wvWsmXLFpnNZsXExFzkt0BzldwpQgFWi3KKyrX1MPfoAQAAwFg+RheQlpamCRMmaMCAARo4cKBmz56t4uJiTZo0SZI0fvx4tWvXTunp6ZKk++67T0OHDtULL7yg66+/XosWLdLGjRv1+uuve5y3qKhIS5Ys0QsvvHDWNTMzM/X111/rmmuuUXBwsDIzM/XAAw/o9ttvV3h4eON/aTQJP1+Lruoapc9+yNHKrFz1ahdqdEkAAADwYoaHr7FjxyovL08zZsxQdna2+vXrp08++cTdVGP//v0ym09N0F155ZVauHChHnnkET388MPq1q2bli5dql69enmcd9GiRXK5XLr11lvPuqbNZtOiRYv02GOPqby8XJ06ddIDDzygtLS0xv2yaHIpPWL02Q85ysjK1b0p3YwuBwAAAF7M5OJmmHopKipSaGioCgsLuf+rGcstKtPAp6uWqW7431RFB9sMrggAAACtTV2zQavvdgjvFhPipz7tq5YbrtpO10MAAAAYh/CFVm94dcv5ldsIXwAAADAO4QutXkpi1f2Dn+/MU3mlw+BqAAAA4K0IX2j1erYNUUywTcV2h77ec8zocgAAAOClCF9o9cxm06mlh1ksPQQAAIAxCF/wCjXhKyMrRzT4BAAAgBEIX/AKg7tGyepj1oFjpdqVe9LocgAAAOCFCF/wCoE2Hw3qHClJymDpIQAAAAxA+ILXSO1By3kAAAAYh/AFr3FN9X1fG/cdU0GJ3eBqAAAA4G0IX/Aa7cMDlBgXLKdLWrMjz+hyAAAA4GUIX/Aq7q6HLD0EAABAEyN8waukVN/3tXp7riodToOrAQAAgDchfMGr9IsPV3iAr4rKKrVp33GjywEAAIAXIXzBq1jMJl3TvbrrIS3nAQAA0IQIX/A6w6uXHvK8LwAAADQlwhe8ztXdouVjNmlX7kntO1psdDkAAADwEoQveJ1Qf18lJURIoushAAAAmg7hC16ppush930BAACgqRC+4JVqnvf19Y9HVVBiN7gaAAAAeAPCF7xS5+ggdYoKVIXDpaueWaWH3/tO/z1YIJfLZXRpAAAAaKVMLv60WS9FRUUKDQ1VYWGhQkJCjC4H9fDVnqP607v/1f5jJe6xxLhgjUuK1+jL2ikswGpgdQAAAGgp6poNCF/1RPhqHZxOl7768agWbzigj7/Plr3SKUmy+pg1smecxiXF64rOkTKbTQZXCgAAgOaK8NXICF+tT0GJXe9vOaxFGw5o25Ei93h8hL/GDojXLf3jFRfqZ2CFAAAAaI4IX42M8NV6uVwufX+oSIs27NcHWw7rRHmlJMlskoZ1j9HYpHgNT4yRr4VbJgEAAED4anSEL+9Qanfoo++OaPGGA1q/95h7PCrIpjH922nsgHh1jg4ysEIAAAAYjfDVyAhf3md33kn9a+MB/b9NB5V/8lR7+oEJERqbFK/rereRv9ViYIUAAAAwAuGrkRG+vFeFw6mVWblavOGAVm/PlbP6f0HBNh/9ol9bjUvqoF7tQmQy0aQDAADAGxC+GhnhC5KUXVimdzcd0OKNB3TgWKl7vEebkKqW9f3aKTTA18AKAQAA0NgIX42M8IXTOZ0ufbXnqBZtOKBPtnq2rB/VK05jk+J1RSda1gMAALRGhK9GRvjCuRSU2LX0m0NatOGAsrJPuMc7RARobFK8bunfXrEhtKwHAABoLQhfjYzwhQtxuVz67lChFm04oA+2HNbJ01rWX1Pdsv4aWtYDAAC0eISvRkb4wsUosVfqo++ytXjDfm3Ye9w9HhVk0y3922tsUrw6RQUaWCEAAADqq67ZoFn8lfsrr7yihIQE+fn5KTk5WevXrz/v/kuWLFFiYqL8/PzUu3dvffTRRx7bJ06cKJPJ5PEaOXKkxz7Hjh3TbbfdppCQEIWFhemOO+7QyZMnG/y7AZIUYPXRLf3ba8kfrtSKtKH6/ZDOigqyKv9kueau2a1rnl+tX72WqX9vPqhSu8PocgEAANAIDJ/5Wrx4scaPH6+5c+cqOTlZs2fP1pIlS7R9+3bFxMSctf+XX36pIUOGKD09XT//+c+1cOFCPfPMM9q8ebN69eolqSp85eTkaN68ee7jbDabwsPD3Z9HjRqlI0eO6LXXXlNFRYUmTZqkpKQkLVy4sE51M/OFn6rC4VTGtlwt3rBfa3bknWpZ7+ejG90t60ONLRIAAAAX1GKWHSYnJyspKUlz5syRJDmdTsXHx2vq1KmaNm3aWfuPHTtWxcXFWrZsmXvsiiuuUL9+/TR37lxJVeGroKBAS5curfWa27Zt06WXXqoNGzZowIABkqRPPvlE1113nQ4ePKi2bdtesG7CFxrSkcJSvbvxoBZvPKCDx0+1rL+0TYjGDYzXjX1pWQ8AANBctYhlh3a7XZs2bVJqaqp7zGw2KzU1VZmZmbUek5mZ6bG/JI0YMeKs/VevXq2YmBh1795dd999t44ePepxjrCwMHfwkqTU1FSZzWZ9/fXXtV63vLxcRUVFHi+gobQJ9dfUlG5a+z/XaMHvknVD37ayWsz64UiRZry/VQOfXqH7F32jzN1HxW2aAAAALZOPkRfPz8+Xw+FQbGysx3hsbKyysrJqPSY7O7vW/bOzs92fR44cqZtvvlmdOnXS7t279fDDD2vUqFHKzMyUxWJRdnb2WUsafXx8FBER4XGe06Wnp+vxxx+vz9cE6sxsNmlw1ygN7hql48V2Ld1ySIurW9Yv3XJYS7ccVsfIAP1qAC3rAQAAWhpDw1djGTdunPt979691adPH3Xp0kWrV69WSkpKvc45ffp0paWluT8XFRUpPj7+J9cKnEt4oFWTBnfSxCsT9N+DVS3rP/z2sPYdLdFzn27Xi8t36Jru0Rqb1EHXdI+WDy3rAQAAmjVDw1dUVJQsFotycnI8xnNychQXF1frMXFxcRe1vyR17txZUVFR2rVrl1JSUhQXF6fc3FyPfSorK3Xs2LFznsdms8lms9XlawENymQyqW98mPrGh+nRn/fQf/57RIs3HNDGfce1YluuVmzLVXRwVcv6Xw2gZT0AAEBzZehflVutVvXv318ZGRnuMafTqYyMDA0aNKjWYwYNGuSxvyQtX778nPtL0sGDB3X06FG1adPGfY6CggJt2rTJvc/KlSvldDqVnJz8U74S0KgCrD765YB4vXt3Vcv6u4Z0VmSgVXknyvXq6qqW9WNfy9R73xxUWQUt6wEAAJoTw7sdLl68WBMmTNBrr72mgQMHavbs2frXv/6lrKwsxcbGavz48WrXrp3S09MlVbWaHzp0qGbNmqXrr79eixYt0tNPP+1uNX/y5Ek9/vjjGjNmjOLi4rR792796U9/0okTJ/Tdd9+5Z69GjRqlnJwczZ07191qfsCAAbSaR4tjr3QqY1uOFm88oDU78uQ6rWX96H7tNDYpnpb1AAAAjajFtJqXpDlz5ui5555Tdna2+vXrp5deesk9AzVs2DAlJCRo/vz57v2XLFmiRx55RHv37lW3bt307LPP6rrrrpMklZaWavTo0frmm29UUFCgtm3b6tprr9WTTz7p0ajj2LFjmjJlij788EOZzWaNGTNGL730koKCgupUM+ELzdHhglK9u+mgFm84oEMFp1rW92wbonFJ8fpFv3YK9adlPQAAQENqUeGrJSJ8oTlzOl36Yne+Fm84oM+25sjucEqSbD5mXde7jcYmxSu5U4RMJpPBlQIAALR8hK9GRvhCS3G82K73vqlqWb8954R7vFNUoH45oL1uuby9YmhZDwAAUG+Er0ZG+EJL43K5tOVAgf618YA+2HJYxfaqhhwWs0nXdI/RuKR4DaNlPQAAwEUjfDUywhdasuLySv3nu6qW9Zv2HXePx5zWsj6BlvUAAAB1QvhqZIQvtBa7ck9o8YYD+n+bD+lYsd09fkXnCI1L6qCRveLk52sxsEIAAIDmjfDVyAhfaG1qWtYv2nBAa3eealkf4uej0ZdVtazv2ZaW9QAAAGcifDUywhdas0MFpXp340H9a6Nny/pe7UI0NqmDftG3LS3rAQAAqhG+GhnhC97A4XTpi135WrzxgD7bmq0KR9V/Lvx8zRrcJUpDLonW0EuiuT8MAAB4NcJXIyN8wdscK7br35urZsN25Jz02NYhIkBDL4nWkEuiNahLpIJsPgZVCQAA0PQIX42M8AVv5XK5tO3ICa3Zkae1O/K0cd8x94yYJPlaTOrfMVxDLonWkG7RurRNiMxmHuYMAABaL8JXIyN8AVWKyyuVufuo1u7M05odedp3tMRje1SQTUO6VS1RvLpblCKDbAZVCgAA0DgIX42M8AXUbm9+sdburJoV+3L3UZVUP8xZkkwmqVfbUA25JEpDL4nRZR3C5MtDnQEAQAtH+GpkhC/gwuyVTm3cd0xrd+Rr7Y48/XCkyGN7sM1Hg7pEamj3qiWK8REBBlUKAABQf4SvRkb4Ai5e7okyfb4jX2t35unznfkeD3WWpM5Rge4OismdIxRgpXEHAABo/ghfjYzwBfw0TqdL3x8u1NodVfeKbd5fIIfz1H+OrBazBnaK0JBLqu4X6x4bLJOJxh0AAKD5IXw1MsIX0LCKyir05a6j7i6Kpz/cWZJiQ2wa0i3a3bgjLMBqUKUAAACeCF+NjPAFNB6Xy6U9+cVasz1Pa3fm6as9R1VW4XRvN5ukPu3D3EsU+7YPlQ+NOwAAgEEIX42M8AU0nbIKhzbsPaa1O/K0dke+tuec8Nge4uejq7pFuR/03CbU36BKAQCANyJ8NTLCF2CcI4Wl+nxHvtbszNO6nfkqLK3w2N4tJsgdxAZ2ipCfr8WgSgEAgDcgfDUywhfQPDicLn17sMC9RPHbAwU6rW+HbD5mXdE5snqJYpS6RAfRuAMAADQowlcjI3wBzVNBiV3rduW7lyhmF5V5bG8X5l/VQbFbtK7sGqVQf1+DKgUAAK0F4auREb6A5s/lcmlHzsmqILYzT1//eEz2ylONOyxmky6LP9W4o1e7UFnMzIoBAICLQ/hqZIQvoOUptTv01Y9H3c8W25NX7LE9PMBXV3WrCmJDukUpJsTPoEoBAEBLQvhqZIQvoOU7eLxEa3fka82OXH2566hOlFd6bE+MC9bQ7tEa2i1a/RPCZfOhcQcAADgb4auREb6A1qXC4dSWA6cad3x3qFCn/9cxwGrRoOrGHUMuiVZCZACNOwAAgCTCV6MjfAGt29GT5Vq3K19rqht35J8s99jeISLAo3FHkM3HoEoBAIDRCF+NjPAFeA+n06Vt2UXuJYqb9h1XhePUfzp9zCb17xjubtxxaZsQmWncAQCA1yB8NTLCF+C9TpZX6qvdR6tmxXbmad/REo/tUUFWXV3duOOqblGKCrIZVCkAAGgKhK9GRvgCUGNvfrHW7szT2h15+nL3UZXYHR7be7ULqe6gGK3e7UMVYGWJIgAArQnhq5ERvgDUxl7p1MZ9x7R2R9WDnn84UnTWPsF+PooL8VNcqJ9iQ/zc708fiwy0snQRAIAWgvDVyAhfAOoi90SZPt+Rr7U787RuZ76OFtvrdJyvxaSYYD/FhtjOCmmnv/fzpf09AABGI3w1MsIXgIvlcrl0orxSOYVlyi4qU3ZhmXKKat6Xu9/nnyxXXf/LHOrvq7gQP8WG+ikuxOZ+3+a0kBYRaKUtPgAAjaiu2YAbDwCgiZhMJoX4+SrEz1fdYoPPuV+Fw6m8E+XKLio7FdROe59TVK7swjKVVjhUWFqhwtIKbc85cc7zWS1mxZwWzOKqQ9np72NCbMyiAQDQyAhfANDM+FrMahvmr7Zh/ufcx+VyqaisUtmFZecJaWXKP2mX3eHUweOlOni89LzXDQ/wrZotqw5l7venhbSwAF9m0QAAqCfCFwC0QCaTSaH+vgr191X3uHPPotkrnco9Ub28sbDcHcqyTwto2YVlKq906nhJhY6XVCgr+9yzaDYfs3s5Y81SxzMDW2yIn6w+5sb42gAAtGjNIny98soreu6555Sdna2+ffvq5Zdf1sCBA8+5/5IlS/Too49q79696tatm5555hldd911kqSKigo98sgj+uijj7Rnzx6FhoYqNTVVs2bNUtu2bd3nSEhI0L59+zzOm56ermnTpjXOlwQAA1h9zGofHqD24QHn3MflcqmwtEJHCs+eOasKaVX3ox0rtqu80qn9x0q0/1jJOc8nSZGBVncoO9UgxKa4UH/3LFqIvw+zaAAAr2J4w43Fixdr/Pjxmjt3rpKTkzV79mwtWbJE27dvV0xMzFn7f/nllxoyZIjS09P185//XAsXLtQzzzyjzZs3q1evXiosLNQtt9yiO++8U3379tXx48d13333yeFwaOPGje7zJCQk6I477tCdd97pHgsODlZgYGCd6qbhBgBvU17pUG5RuWezkNODWlGZcgrLZXc463Q+P1+z5/LG097X/DMm2CZfC7NoAIDmrcV0O0xOTlZSUpLmzJkjSXI6nYqPj9fUqVNrnYUaO3asiouLtWzZMvfYFVdcoX79+mnu3Lm1XmPDhg0aOHCg9u3bpw4dOkiqCl/333+/7r///nrVTfgCgLO5XC4dL6nQkcJSz6WOZ4S0gpKKOp3PZJIiA21qF+6vLtGB6hIdpK4xQeoSHaSOkQEEMwBAs9Aiuh3a7XZt2rRJ06dPd4+ZzWalpqYqMzOz1mMyMzOVlpbmMTZixAgtXbr0nNcpLCyUyWRSWFiYx/isWbP05JNPqkOHDvr1r3+tBx54QD4+tf9IysvLVV5e7v5cVHT2g1MBwNuZTCZFBFoVEWhVz7ah59yvrMJRy71n5ae13i9T7okyVThcyj9ZrvyT5fr2QIHHOXzMJnWMDPAIZF1jgtQ5OlDBfr6N/E0BALh4hoav/Px8ORwOxcbGeozHxsYqKyur1mOys7Nr3T87O7vW/cvKyvTQQw/p1ltv9Uih9957ry6//HJFREToyy+/1PTp03XkyBG9+OKLtZ4nPT1djz/++MV8PQDAOfj5WtQxMlAdI8+91NvpdOlYiV3ZhWU6cKxEu/NOalfuSe3OK9buvJMqsTuq3xfrsx9yPI6NC/FTl5jAs4JZTLCN+8wAAIZpFg03GktFRYV+9atfyeVy6dVXX/XYdvrsWZ8+fWS1WvX73/9e6enpstlsZ51r+vTpHscUFRUpPj6+8YoHAC9nNpsUFWRTVJBNvdp5zqI5nS5lF5VVh7GTHsGs5hlp2UVl+mLXUY/jgmw+VcsXTwtkLGEEADQVQ8NXVFSULBaLcnI8/8YyJydHcXFxtR4TFxdXp/1rgte+ffu0cuXKC96XlZycrMrKSu3du1fdu3c/a7vNZqs1lAEAmp7ZbHI/C23IJdEe2wpLKrQ7/6R2557UrryT2p1bNVO272ixTpZX6tuDhfr2YKHHMSxhBAA0BUPDl9VqVf/+/ZWRkaHRo0dLqmq4kZGRoSlTptR6zKBBg5SRkeHRKGP58uUaNGiQ+3NN8Nq5c6dWrVqlyMjIC9ayZcsWmc3mWjssAgBajtAAX13eIVyXdwj3GC+vdGjf0RLtzj15UUsYY0NsHoGsS3TVKzaEJYwAgItj+LLDtLQ0TZgwQQMGDNDAgQM1e/ZsFRcXa9KkSZKk8ePHq127dkpPT5ck3XfffRo6dKheeOEFXX/99Vq0aJE2btyo119/XVJV8Lrlllu0efNmLVu2TA6Hw30/WEREhKxWqzIzM/X111/rmmuuUXBwsDIzM/XAAw/o9ttvV3h4eO2FAgBaNJuPRZfEBuuSWM+HUtcsYTwVyDyXMOYUVb1YwggA+KkMbzUvSXPmzHE/ZLlfv3566aWXlJycLEkaNmyYEhISNH/+fPf+S5Ys0SOPPOJ+yPKzzz7rfsjy3r171alTp1qvs2rVKg0bNkybN2/WPffco6ysLJWXl6tTp076zW9+o7S0tDovLaTVPAC0fudbwug8x/971raEsSqgsYQRAFqrFvOcr5aK8AUA3qu80qH9R0vOmimrWcJ4LixhBIDWifDVyAhfAIAzXWgJ47mcuYSxJpyxhBEAWgbCVyMjfAEALkZhaUVVW/wzljDuP1YixznWMLKEEQBaBsJXIyN8AQAaQkMsYTw9nLGEEQCaHuGrkRG+AACNyeVy6UjhT1jCGB2khKhA+fta5GMxyddilm/1P30sZllPe+/r3m6Wj9kkq0/VP30t5lPvfczyNVftazGbCHgAcBrCVyMjfAEAjFLbEsY9eSe17zxLGBua1WI+K9T5Vo95bDOb5etjko/ZfNa+p8LgGcdUb/Mxm+XrUxUUa977ms88pvZz+tZSnw+hEUAjqWs2MPw5XwAA4OKE+p/7QdKnL2E8cKxUdodTFdWvSofL/bnS4aoer/pnpdMle6VTlc5TYzXbawt0dodTVasiz700sjlyhzpLzQxfVTj0NXsGtlB/X0UEWt2vyECrwqv/WTMW4ucrs5kwB6DuCF8AALQSNh+LusUGq9sZD5L+qZxOlyqctQS2M8Kc3eFUZc12p1MVlVWh7vRjPI93yu5wVR/jed4Kh7P6fNXHOV3V5/M8pvYaTgXKM1Vdw6HSip/+c7GYTQoPqAlmvooMtHkEtjNDW3igle6VgJcjfAEAgPMym02ymS2ytbA/NbhcLlU4XFWzeZXVgdDh+f7MwFbhcMpe6VRBaYWOF9t1rNiuo8V2Ha/+57Hq18nySjmcLuWfLFf+yXPfg3emED+f08KZrdYZNXdwC7LK39fCUkmgFWlh/xkFAACoG5PJJKuPSVaZJWvDnru80qHjxRU6Wlzu/uex08LZ6aHtWLFdx0vscrqkorJKFZVVau/Rkjpdx+ZjrgpmQVVhLSLAtyq0BVkVHnAqpEUEWhURYFWoP0shgeaM8AUAAHCRbD4WxYVaFBfqV6f9HU6XCksrTgtn5TpWXKFjxeUeM2qnBzd7pVPllU4dLizT4cKyOl2nailk1f1q4QGewSwi0KqIoOrZtupt4QFWWX1YCgk0FcIXAABAI7OYTe7lhHXhcrlUYnfUsuzxVGg7M6ydKKtZCmlX/kl7nWsLtvlUz6xZ3cEsIqhmKaRNEYG+HkskA60shQTqi/AFAADQzJhMJgXafBRo81F8RECdjrFXOlVQYj9rJq0mtHkuj6zQ8RK7HE6XTpRX6kR5pfbVcSmktWYp5JmvgKpwFh5gVViAr0L9fRUeaFWYv68CCGyAJMIXAABAq2D1MSsmxE8xIXVbCul0ulRUVlFrQ5Ha7ls7WlyusoqqhiRHCst0pI5LIaWq58KFBvgqzN9X4QHWU+8Dq+5TqwlsYf6+Cqt5H+BLwxG0OoQvAAAAL2Q2m6qDjlWKrtsxpXaHe/bMM5jZdexkVWORgtIKFZZUzawVlFRUPxPOqbwT5co7UffOkFJVoKwKZNWh7LSgFhpQ/d7/tPcBvgrzt8rfaqnHTwRofIQvAAAA1Im/1aL21gC1D6/bUkiXy6XSCocKSiqqX1XhrKA6nBVWt/T3CGylVftVOKoe/J17oly5FxnabD5mhVUHstDq8HZqxs2q8IDTAl31WFiAr/x8CW1oXIQvAAAANAqTyaQAq48CrD5qG+Zf5+NqGo7UPG+tsPTUTNrpgc0z0FVtr3S6VF7pVE5RuXKKLi60+fma3UGsJpSFB/oq9LTAdur9qf1sPoQ21A3hCwAAAM3K6Q1H2l1kaCu2O9yBreD02bRaAtvxErsKSypUUFohh9OlsgqnsivKlF1U9/vZJMnf16LwAF+F1iyNrA5sVTNuVSHOY2lk9VhLaPPvcrnkckmumvdS9efq8dPfn76Ps/ZxZ/XAmedxVl9HtY1Xj8njfFXbwgOsdX7kQ3NA+AIAAECrYDKZFGTzUZDNR/EXcZzLVdX1sbDkjMBWPZt2rsBWUP3w7NIKh0oLHXV+HluNAKtF4QFWBdos1XWcChuqJbTUhB3VNi7PgHJ6aHGdcc5Tx5w6Vh7HnB54mrfbkjvoqZt6G11GnRG+AAAA4NVMJpNC/HwV4uer+Ii6H+d0ngpttQU2931tpy+ZrB5zuaQSu0Ml9tLG+2LNkMkkmVT1Mze5P5uq/nn6+5p9zvHebJKkqrDdkrSsagEAAIBmwmw2KdS/6plmHSLr1oREqg5tZZXuwHayrLIqTNQSPszVoUS1jVePSaeCi9l85jlODzrnCDxnjJ+3lqoNF6zFXNs1eWwA4QsAAABoSmazSaHV7fLhXZr/XX4AAAAA0AoQvgAAAACgCRC+AAAAAKAJEL4AAAAAoAkQvgAAAACgCRC+AAAAAKAJEL4AAAAAoAkQvgAAAACgCRC+AAAAAKAJEL4AAAAAoAkQvgAAAACgCRC+AAAAAKAJEL4AAAAAoAkQvgAAAACgCfgYXUBL5XK5JElFRUUGVwIAAADASDWZoCYjnAvhq55OnDghSYqPjze4EgAAAADNwYkTJxQaGnrO7SbXheIZauV0OnX48GEFBwfLZDIZWktRUZHi4+N14MABhYSEGFoLvAO/c2hK/L6hqfE7h6bE71vr4HK5dOLECbVt21Zm87nv7GLmq57MZrPat29vdBkeQkJC+B8tmhS/c2hK/L6hqfE7h6bE71vLd74Zrxo03AAAAACAJkD4AgAAAIAmQPhqBWw2m2bOnCmbzWZ0KfAS/M6hKfH7hqbG7xyaEr9v3oWGGwAAAADQBJj5AgAAAIAmQPgCAAAAgCZA+AIAAACAJkD4AgAAAIAmQPhqBV555RUlJCTIz89PycnJWr9+vdEloRVKT09XUlKSgoODFRMTo9GjR2v79u1GlwUvMWvWLJlMJt1///1Gl4JW7NChQ7r99tsVGRkpf39/9e7dWxs3bjS6LLRSDodDjz76qDp16iR/f3916dJFTz75pOiF17oRvlq4xYsXKy0tTTNnztTmzZvVt29fjRgxQrm5uUaXhlZmzZo1mjx5sr766istX75cFRUVuvbaa1VcXGx0aWjlNmzYoNdee019+vQxuhS0YsePH9fgwYPl6+urjz/+WD/88INeeOEFhYeHG10aWqlnnnlGr776qubMmaNt27bpmWee0bPPPquXX37Z6NLQiGg138IlJycrKSlJc+bMkSQ5nU7Fx8dr6tSpmjZtmsHVoTXLy8tTTEyM1qxZoyFDhhhdDlqpkydP6vLLL9ff/vY3/fnPf1a/fv00e/Zso8tCKzRt2jR98cUX+vzzz40uBV7i5z//uWJjY/Xmm2+6x8aMGSN/f3+98847BlaGxsTMVwtmt9u1adMmpaamusfMZrNSU1OVmZlpYGXwBoWFhZKkiIgIgytBazZ58mRdf/31Hv+dAxrDBx98oAEDBuiXv/ylYmJidNlll+mNN94wuiy0YldeeaUyMjK0Y8cOSdK3336rdevWadSoUQZXhsbkY3QBqL/8/Hw5HA7FxsZ6jMfGxiorK8ugquANnE6n7r//fg0ePFi9evUyuhy0UosWLdLmzZu1YcMGo0uBF9izZ49effVVpaWl6eGHH9aGDRt07733ymq1asKECUaXh1Zo2rRpKioqUmJioiwWixwOh5566inddtttRpeGRkT4AnDRJk+erO+//17r1q0zuhS0UgcOHNB9992n5cuXy8/Pz+hy4AWcTqcGDBigp59+WpJ02WWX6fvvv9fcuXMJX2gU//rXv7RgwQItXLhQPXv21JYtW3T//ferbdu2/M61YoSvFiwqKkoWi0U5OTke4zk5OYqLizOoKrR2U6ZM0bJly7R27Vq1b9/e6HLQSm3atEm5ubm6/PLL3WMOh0Nr167VnDlzVF5eLovFYmCFaG3atGmjSy+91GOsR48e+n//7/8ZVBFau//5n//RtGnTNG7cOElS7969tW/fPqWnpxO+WjHu+WrBrFar+vfvr4yMDPeY0+lURkaGBg0aZGBlaI1cLpemTJmi9957TytXrlSnTp2MLgmtWEpKir777jtt2bLF/RowYIBuu+02bdmyheCFBjd48OCzHp+xY8cOdezY0aCK0NqVlJTIbPb8o7jFYpHT6TSoIjQFZr5auLS0NE2YMEEDBgzQwIEDNXv2bBUXF2vSpElGl4ZWZvLkyVq4cKHef/99BQcHKzs7W5IUGhoqf39/g6tDaxMcHHzW/YSBgYGKjIzkPkM0igceeEBXXnmlnn76af3qV7/S+vXr9frrr+v11183ujS0UjfccIOeeuopdejQQT179tQ333yjF198Ub/97W+NLg2NiFbzrcCcOXP03HPPKTs7W/369dNLL72k5ORko8tCK2MymWodnzdvniZOnNi0xcArDRs2jFbzaFTLli3T9OnTtXPnTnXq1ElpaWm68847jS4LrdSJEyf06KOP6r333lNubq7atm2rW2+9VTNmzJDVajW6PDQSwhcAAAAANAHu+QIAAACAJkD4AgAAAIAmQPgCAAAAgCZA+AIAAACAJkD4AgAAAIAmQPgCAAAAgCZA+AIAAACAJkD4AgAAAIAmQPgCAKCJmUwmLV261OgyAABNjPAFAPAqEydOlMlkOus1cuRIo0sDALRyPkYXAABAUxs5cqTmzZvnMWaz2QyqBgDgLZj5AgB4HZvNpri4OI9XeHi4pKolga+++qpGjRolf39/de7cWe+++67H8d99952GDx8uf39/RUZG6q677tLJkyc99nnrrbfUs2dP2Ww2tWnTRlOmTPHYnp+fr5tuukkBAQHq1q2bPvjgg8b90gAAwxG+AAA4w6OPPqoxY8bo22+/1W233aZx48Zp27ZtkqTi4mKNGDFC4eHh2rBhg5YsWaIVK1Z4hKtXX31VkydP1l133aXvvvtOH3zwgbp27epxjccff1y/+tWv9N///lfXXXedbrvtNh07dqxJvycAoGmZXC6Xy+giAABoKhMnTtQ777wjPz8/j/GHH35YDz/8sEwmk/7whz/o1VdfdW+74oordPnll+tvf/ub3njjDT300EM6cOCAAgMDJUkfffSRbrjhBh0+fFixsbFq166dJk2apD//+c+11mAymfTII4/oySeflFQV6IKCgvTxxx9z7xkAtGLc8wUA8DrXXHONR7iSpIiICPf7QYMGeWwbNGiQtmzZIknatm2b+vbt6w5ekjR48GA5nU5t375dJpNJhw8fVkpKynlr6NOnj/t9YGCgQkJClJubW9+vBABoAQhfAACvExgYeNYywIbi7+9fp/18fX09PptMJjmdzsYoCQDQTHDPFwAAZ/jqq6/O+tyjRw9JUo8ePfTtt9+quLjYvf2LL76Q2WxW9+7dFRwcrISEBGVkZDRpzQCA5o+ZLwCA1ykvL1d2drbHmI+Pj6KioiRJS5Ys0YABA3TVVVdpwYIFWr9+vd58801J0m233aaZM2dqwoQJeuyxx5SXl6epU6fqN7/5jWJjYyVJjz32mP7whz8oJiZGo0aN0okTJ/TFF19o6tSpTftFAQDNCuELAOB1PvnkE7Vp08ZjrHv37srKypJU1Ylw0aJFuueee9SmTRv93//9ny699FJJUkBAgD799FPdd999SkpKUkBAgMaMGaMXX3zRfa4JEyaorKxMf/nLX/Tggw8qKipKt9xyS9N9QQBAs0S3QwAATmMymfTee+9p9OjRRpcCAGhluOcLAAAAAJoA4QsAAAAAmgD3fAEAcBpW4wMAGgszXwAAAADQBAhfAAAAANAECF8AAAAA0AQIXwAAAADQBAhfAAAAANAECF8AAAAA0AQIXwAAAADQBAhfAAAAANAE/j8Zf7I6rjNgMgAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training accuracy: 99.66%\n",
            "Test accuracy: 98.80%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Looking at the loss and accuracy graphs, we can see that the model is doing well. Both the training and test losses go down, while the accuracies go up with each epoch. After five epochs, the model reached a test accuracy of 98.8%. This is expected because the MNIST dataset is easy, and LeNet-5 works well with it. We stopped at five epochs because the model started to overfit after that"
      ],
      "metadata": {
        "id": "cAhy-NL8fovu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question 3"
      ],
      "metadata": {
        "id": "1N7_nl1SSmfc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from torch.optim import lr_scheduler\n",
        "import numpy as np\n",
        "import torchvision\n",
        "from torchvision import datasets, models, transforms\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "import os\n",
        "from PIL import Image\n",
        "from tempfile import TemporaryDirectory\n",
        "\n",
        "plt.ion()  # Interactive mode\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "qRYiZr0gL9xW",
        "outputId": "5b04c040-181e-43f6-de37-dee6223cd431"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<contextlib.ExitStack at 0x78fbbdad5ba0>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!wget https://download.pytorch.org/tutorial/hymenoptera_data.zip\n",
        "#unzip\n",
        "!unzip hymenoptera_data.zip -d /content/data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "NTmuaUmtS0aR",
        "outputId": "375d54ed-153a-49e1-8167-955a09f7bcb9"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2024-11-14 15:29:54--  https://download.pytorch.org/tutorial/hymenoptera_data.zip\n",
            "Resolving download.pytorch.org (download.pytorch.org)... 3.165.102.62, 3.165.102.113, 3.165.102.31, ...\n",
            "Connecting to download.pytorch.org (download.pytorch.org)|3.165.102.62|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 47286322 (45M) [application/zip]\n",
            "Saving to: ‘hymenoptera_data.zip’\n",
            "\n",
            "\rhymenoptera_data.zi   0%[                    ]       0  --.-KB/s               \rhymenoptera_data.zi 100%[===================>]  45.10M  --.-KB/s    in 0.1s    \n",
            "\n",
            "2024-11-14 15:29:54 (389 MB/s) - ‘hymenoptera_data.zip’ saved [47286322/47286322]\n",
            "\n",
            "Archive:  hymenoptera_data.zip\n",
            "   creating: /content/data/hymenoptera_data/\n",
            "   creating: /content/data/hymenoptera_data/train/\n",
            "   creating: /content/data/hymenoptera_data/train/ants/\n",
            "  inflating: /content/data/hymenoptera_data/train/ants/0013035.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/1030023514_aad5c608f9.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/1095476100_3906d8afde.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/1099452230_d1949d3250.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/116570827_e9c126745d.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/1225872729_6f0856588f.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/1262877379_64fcada201.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/1269756697_0bce92cdab.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/1286984635_5119e80de1.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/132478121_2a430adea2.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/1360291657_dc248c5eea.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/1368913450_e146e2fb6d.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/1473187633_63ccaacea6.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/148715752_302c84f5a4.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/1489674356_09d48dde0a.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/149244013_c529578289.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/150801003_3390b73135.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/150801171_cd86f17ed8.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/154124431_65460430f2.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/162603798_40b51f1654.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/1660097129_384bf54490.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/167890289_dd5ba923f3.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/1693954099_46d4c20605.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/175998972.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/178538489_bec7649292.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/1804095607_0341701e1c.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/1808777855_2a895621d7.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/188552436_605cc9b36b.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/1917341202_d00a7f9af5.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/1924473702_daa9aacdbe.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/196057951_63bf063b92.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/196757565_326437f5fe.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/201558278_fe4caecc76.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/201790779_527f4c0168.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/2019439677_2db655d361.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/207947948_3ab29d7207.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/20935278_9190345f6b.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/224655713_3956f7d39a.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/2265824718_2c96f485da.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/2265825502_fff99cfd2d.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/226951206_d6bf946504.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/2278278459_6b99605e50.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/2288450226_a6e96e8fdf.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/2288481644_83ff7e4572.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/2292213964_ca51ce4bef.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/24335309_c5ea483bb8.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/245647475_9523dfd13e.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/255434217_1b2b3fe0a4.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/258217966_d9d90d18d3.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/275429470_b2d7d9290b.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/28847243_e79fe052cd.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/318052216_84dff3f98a.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/334167043_cbd1adaeb9.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/339670531_94b75ae47a.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/342438950_a3da61deab.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/36439863_0bec9f554f.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/374435068_7eee412ec4.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/382971067_0bfd33afe0.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/384191229_5779cf591b.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/386190770_672743c9a7.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/392382602_1b7bed32fa.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/403746349_71384f5b58.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/408393566_b5b694119b.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/424119020_6d57481dab.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/424873399_47658a91fb.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/450057712_771b3bfc91.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/45472593_bfd624f8dc.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/459694881_ac657d3187.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/460372577_f2f6a8c9fc.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/460874319_0a45ab4d05.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/466430434_4000737de9.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/470127037_513711fd21.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/474806473_ca6caab245.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/475961153_b8c13fd405.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/484293231_e53cfc0c89.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/49375974_e28ba6f17e.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/506249802_207cd979b4.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/506249836_717b73f540.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/512164029_c0a66b8498.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/512863248_43c8ce579b.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/518773929_734dbc5ff4.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/522163566_fec115ca66.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/522415432_2218f34bf8.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/531979952_bde12b3bc0.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/533848102_70a85ad6dd.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/535522953_308353a07c.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/540889389_48bb588b21.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/541630764_dbd285d63c.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/543417860_b14237f569.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/560966032_988f4d7bc4.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/5650366_e22b7e1065.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/6240329_72c01e663e.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/6240338_93729615ec.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/649026570_e58656104b.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/662541407_ff8db781e7.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/67270775_e9fdf77e9d.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/6743948_2b8c096dda.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/684133190_35b62c0c1d.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/69639610_95e0de17aa.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/707895295_009cf23188.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/7759525_1363d24e88.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/795000156_a9900a4a71.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/822537660_caf4ba5514.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/82852639_52b7f7f5e3.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/841049277_b28e58ad05.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/886401651_f878e888cd.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/892108839_f1aad4ca46.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/938946700_ca1c669085.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/957233405_25c1d1187b.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/9715481_b3cb4114ff.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/998118368_6ac1d91f81.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/ant photos.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/Ant_1.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/army-ants-red-picture.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/formica.jpeg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/hormiga_co_por.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/imageNotFound.gif  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/kurokusa.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/MehdiabadiAnt2_600.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/Nepenthes_rafflesiana_ant.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/swiss-army-ant.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/termite-vs-ant.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/trap-jaw-ant-insect-bg.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/ants/VietnameseAntMimicSpider.jpg  \n",
            "   creating: /content/data/hymenoptera_data/train/bees/\n",
            "  inflating: /content/data/hymenoptera_data/train/bees/1092977343_cb42b38d62.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/1093831624_fb5fbe2308.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/1097045929_1753d1c765.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/1232245714_f862fbe385.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/129236073_0985e91c7d.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/1295655112_7813f37d21.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/132511197_0b86ad0fff.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/132826773_dbbcb117b9.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/150013791_969d9a968b.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/1508176360_2972117c9d.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/154600396_53e1252e52.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/16838648_415acd9e3f.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/1691282715_0addfdf5e8.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/17209602_fe5a5a746f.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/174142798_e5ad6d76e0.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/1799726602_8580867f71.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/1807583459_4fe92b3133.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/196430254_46bd129ae7.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/196658222_3fffd79c67.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/198508668_97d818b6c4.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2031225713_50ed499635.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2037437624_2d7bce461f.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2053200300_8911ef438a.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/205835650_e6f2614bee.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/208702903_42fb4d9748.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/21399619_3e61e5bb6f.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2227611847_ec72d40403.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2321139806_d73d899e66.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2330918208_8074770c20.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2345177635_caf07159b3.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2358061370_9daabbd9ac.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2364597044_3c3e3fc391.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2384149906_2cd8b0b699.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2397446847_04ef3cd3e1.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2405441001_b06c36fa72.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2445215254_51698ff797.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2452236943_255bfd9e58.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2467959963_a7831e9ff0.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2470492904_837e97800d.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2477324698_3d4b1b1cab.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2477349551_e75c97cf4d.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2486729079_62df0920be.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2486746709_c43cec0e42.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2493379287_4100e1dacc.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2495722465_879acf9d85.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2528444139_fa728b0f5b.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2538361678_9da84b77e3.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2551813042_8a070aeb2b.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2580598377_a4caecdb54.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2601176055_8464e6aa71.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2610833167_79bf0bcae5.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2610838525_fe8e3cae47.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2617161745_fa3ebe85b4.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2625499656_e3415e374d.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2634617358_f32fd16bea.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2638074627_6b3ae746a0.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2645107662_b73a8595cc.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2651621464_a2fa8722eb.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2652877533_a564830cbf.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/266644509_d30bb16a1b.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2683605182_9d2a0c66cf.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2704348794_eb5d5178c2.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2707440199_cd170bd512.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2710368626_cb42882dc8.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2722592222_258d473e17.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2728759455_ce9bb8cd7a.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2756397428_1d82a08807.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2765347790_da6cf6cb40.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2781170484_5d61835d63.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/279113587_b4843db199.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2792000093_e8ae0718cf.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2801728106_833798c909.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2822388965_f6dca2a275.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2861002136_52c7c6f708.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2908916142_a7ac8b57a8.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/29494643_e3410f0d37.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2959730355_416a18c63c.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/2962405283_22718d9617.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/3006264892_30e9cced70.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/3030189811_01d095b793.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/3030772428_8578335616.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/3044402684_3853071a87.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/3074585407_9854eb3153.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/3079610310_ac2d0ae7bc.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/3090975720_71f12e6de4.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/3100226504_c0d4f1e3f1.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/342758693_c56b89b6b6.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/354167719_22dca13752.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/359928878_b3b418c728.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/365759866_b15700c59b.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/36900412_92b81831ad.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/39672681_1302d204d1.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/39747887_42df2855ee.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/421515404_e87569fd8b.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/444532809_9e931e2279.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/446296270_d9e8b93ecf.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/452462677_7be43af8ff.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/452462695_40a4e5b559.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/457457145_5f86eb7e9c.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/465133211_80e0c27f60.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/469333327_358ba8fe8a.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/472288710_2abee16fa0.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/473618094_8ffdcab215.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/476347960_52edd72b06.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/478701318_bbd5e557b8.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/507288830_f46e8d4cb2.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/509247772_2db2d01374.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/513545352_fd3e7c7c5d.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/522104315_5d3cb2758e.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/537309131_532bfa59ea.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/586041248_3032e277a9.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/760526046_547e8b381f.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/760568592_45a52c847f.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/774440991_63a4aa0cbe.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/85112639_6e860b0469.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/873076652_eb098dab2d.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/90179376_abc234e5f4.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/92663402_37f379e57a.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/95238259_98470c5b10.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/969455125_58c797ef17.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/train/bees/98391118_bdb1e80cce.jpg  \n",
            "   creating: /content/data/hymenoptera_data/val/\n",
            "   creating: /content/data/hymenoptera_data/val/ants/\n",
            "  inflating: /content/data/hymenoptera_data/val/ants/10308379_1b6c72e180.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/1053149811_f62a3410d3.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/1073564163_225a64f170.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/1119630822_cd325ea21a.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/1124525276_816a07c17f.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/11381045_b352a47d8c.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/119785936_dd428e40c3.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/1247887232_edcb61246c.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/1262751255_c56c042b7b.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/1337725712_2eb53cd742.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/1358854066_5ad8015f7f.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/1440002809_b268d9a66a.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/147542264_79506478c2.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/152286280_411648ec27.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/153320619_2aeb5fa0ee.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/153783656_85f9c3ac70.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/157401988_d0564a9d02.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/159515240_d5981e20d1.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/161076144_124db762d6.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/161292361_c16e0bf57a.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/170652283_ecdaff5d1a.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/17081114_79b9a27724.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/172772109_d0a8e15fb0.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/1743840368_b5ccda82b7.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/181942028_961261ef48.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/183260961_64ab754c97.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/2039585088_c6f47c592e.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/205398178_c395c5e460.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/208072188_f293096296.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/209615353_eeb38ba204.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/2104709400_8831b4fc6f.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/212100470_b485e7b7b9.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/2127908701_d49dc83c97.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/2191997003_379df31291.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/2211974567_ee4606b493.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/2219621907_47bc7cc6b0.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/2238242353_52c82441df.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/2255445811_dabcdf7258.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/239161491_86ac23b0a3.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/263615709_cfb28f6b8e.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/308196310_1db5ffa01b.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/319494379_648fb5a1c6.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/35558229_1fa4608a7a.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/412436937_4c2378efc2.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/436944325_d4925a38c7.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/445356866_6cb3289067.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/459442412_412fecf3fe.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/470127071_8b8ee2bd74.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/477437164_bc3e6e594a.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/488272201_c5aa281348.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/502717153_3e4865621a.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/518746016_bcc28f8b5b.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/540543309_ddbb193ee5.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/562589509_7e55469b97.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/57264437_a19006872f.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/573151833_ebbc274b77.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/649407494_9b6bc4949f.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/751649788_78dd7d16ce.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/768870506_8f115d3d37.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/800px-Meat_eater_ant_qeen_excavating_hole.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/8124241_36b290d372.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/8398478_50ef10c47a.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/854534770_31f6156383.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/892676922_4ab37dce07.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/94999827_36895faade.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/Ant-1818.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/ants-devouring-remains-of-large-dead-insect-on-red-tile-in-Stellenbosch-South-Africa-closeup-1-DHD.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/desert_ant.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/F.pergan.28(f).jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/ants/Hormiga.jpg  \n",
            "   creating: /content/data/hymenoptera_data/val/bees/\n",
            "  inflating: /content/data/hymenoptera_data/val/bees/1032546534_06907fe3b3.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/10870992_eebeeb3a12.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/1181173278_23c36fac71.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/1297972485_33266a18d9.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/1328423762_f7a88a8451.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/1355974687_1341c1face.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/144098310_a4176fd54d.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/1486120850_490388f84b.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/149973093_da3c446268.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/151594775_ee7dc17b60.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/151603988_2c6f7d14c7.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/1519368889_4270261ee3.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/152789693_220b003452.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/177677657_a38c97e572.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/1799729694_0c40101071.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/181171681_c5a1a82ded.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/187130242_4593a4c610.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/203868383_0fcbb48278.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2060668999_e11edb10d0.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2086294791_6f3789d8a6.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2103637821_8d26ee6b90.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2104135106_a65eede1de.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/215512424_687e1e0821.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2173503984_9c6aaaa7e2.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/220376539_20567395d8.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/224841383_d050f5f510.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2321144482_f3785ba7b2.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/238161922_55fa9a76ae.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2407809945_fb525ef54d.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2415414155_1916f03b42.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2438480600_40a1249879.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2444778727_4b781ac424.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2457841282_7867f16639.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2470492902_3572c90f75.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2478216347_535c8fe6d7.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2501530886_e20952b97d.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2506114833_90a41c5267.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2509402554_31821cb0b6.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2525379273_dcb26a516d.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/26589803_5ba7000313.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2668391343_45e272cd07.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2670536155_c170f49cd0.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2685605303_9eed79d59d.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2702408468_d9ed795f4f.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2709775832_85b4b50a57.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2717418782_bd83307d9f.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/272986700_d4d4bf8c4b.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2741763055_9a7bb00802.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2745389517_250a397f31.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2751836205_6f7b5eff30.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2782079948_8d4e94a826.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2809496124_5f25b5946a.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2815838190_0a9889d995.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2841437312_789699c740.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/2883093452_7e3a1eb53f.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/290082189_f66cb80bfc.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/296565463_d07a7bed96.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/3077452620_548c79fda0.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/348291597_ee836fbb1a.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/350436573_41f4ecb6c8.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/353266603_d3eac7e9a0.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/372228424_16da1f8884.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/400262091_701c00031c.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/416144384_961c326481.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/44105569_16720a960c.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/456097971_860949c4fc.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/464594019_1b24a28bb1.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/485743562_d8cc6b8f73.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/540976476_844950623f.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/54736755_c057723f64.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/57459255_752774f1b2.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/576452297_897023f002.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/586474709_ae436da045.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/590318879_68cf112861.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/59798110_2b6a3c8031.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/603709866_a97c7cfc72.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/603711658_4c8cd2201e.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/65038344_52a45d090d.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/6a00d8341c630a53ef00e553d0beb18834-800wi.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/72100438_73de9f17af.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/759745145_e8bc776ec8.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/936182217_c4caa5222d.jpg  \n",
            "  inflating: /content/data/hymenoptera_data/val/bees/abeja.jpg  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Data loading\n",
        "data_transforms = {\n",
        "    'train': transforms.Compose([\n",
        "        transforms.RandomResizedCrop(224),\n",
        "        transforms.RandomHorizontalFlip(),\n",
        "        transforms.ToTensor(),\n",
        "        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n",
        "    ]),\n",
        "    'val': transforms.Compose([\n",
        "        transforms.Resize(256),\n",
        "        transforms.CenterCrop(224),\n",
        "        transforms.ToTensor(),\n",
        "        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n",
        "    ]),\n",
        "}\n",
        "data_dir = 'data/hymenoptera_data'\n",
        "image_datasets = {x: torchvision.datasets.ImageFolder(os.path.join(data_dir, x), data_transforms[x]) for x in ['train', 'val']}\n",
        "dataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=4, shuffle=True, num_workers=4) for x in ['train', 'val']}\n",
        "dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}\n",
        "class_names = image_datasets['train'].classes\n",
        "\n",
        "# Load pre-trained ResNet18\n",
        "resnet18 = models.resnet18(pretrained=True)\n",
        "\n",
        "# Modify the final layer\n",
        "num_ftrs = resnet18.fc.in_features\n",
        "resnet18.fc = nn.Linear(num_ftrs, 2)\n",
        "\n",
        "# Transfer learning setup\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = optim.SGD(resnet18.parameters(), lr=0.001, momentum=0.9)\n",
        "exp_lr_scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=7, gamma=0.1)\n",
        "\n",
        "# Training loop\n",
        "def train_model(model, criterion, optimizer, scheduler, num_epochs=10):\n",
        "    train_losses = []\n",
        "    val_accuracies = []\n",
        "    for epoch in range(num_epochs):\n",
        "        print(f'Epoch {epoch}/{num_epochs-1}')\n",
        "        print('-' * 10)\n",
        "\n",
        "        for phase in ['train', 'val']:\n",
        "            if phase == 'train':\n",
        "                model.train()\n",
        "            else:\n",
        "                model.eval()\n",
        "\n",
        "            running_loss = 0.0\n",
        "            running_corrects = 0\n",
        "\n",
        "            for inputs, labels in dataloaders[phase]:\n",
        "                optimizer.zero_grad()\n",
        "\n",
        "                with torch.set_grad_enabled(phase == 'train'):\n",
        "                    outputs = model(inputs)\n",
        "                    loss = criterion(outputs, labels)\n",
        "                    _, preds = torch.max(outputs, 1)\n",
        "\n",
        "                    if phase == 'train':\n",
        "                        loss.backward()\n",
        "                        optimizer.step()\n",
        "\n",
        "                running_loss += loss.item() * inputs.size(0)\n",
        "                running_corrects += torch.sum(preds == labels.data)\n",
        "\n",
        "            epoch_loss = running_loss / dataset_sizes[phase]\n",
        "            epoch_acc = running_corrects.double() / dataset_sizes[phase]\n",
        "\n",
        "\n",
        "\n",
        "            if phase == 'train':\n",
        "                scheduler.step()\n",
        "                train_losses.append(epoch_loss)\n",
        "            else:\n",
        "                val_accuracies.append(epoch_acc.item())\n",
        "\n",
        "            print(f'{phase} Loss: {epoch_loss:.4f} Acc: {epoch_acc:.4f}')\n",
        "\n",
        "    return model ,train_losses, val_accuracies\n",
        "\n",
        "# Train the fine-tuned model\n",
        "model_ft, train_losses, val_accuracies  = train_model(resnet18, criterion, optimizer, exp_lr_scheduler, num_epochs=10)\n",
        "\n",
        "\n",
        "# Plotting Training Loss and Validation Accuracy\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(train_losses, label=\"Training Loss\")\n",
        "plt.xlabel(\"Epoch\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.title(\"Training Loss\")\n",
        "plt.legend()\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(val_accuracies, label=\"Validation Accuracy\")\n",
        "plt.xlabel(\"Epoch\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.title(\"Validation Accuracy\")\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# Calculate accuracy\n",
        "def calculate_accuracy(loader, model):\n",
        "    correct = 0\n",
        "    total = 0\n",
        "    with torch.no_grad():\n",
        "        for data in loader:\n",
        "            inputs, labels = data\n",
        "            outputs = model(inputs)\n",
        "            _, predicted = torch.max(outputs.data, 1)\n",
        "            total += labels.size(0)\n",
        "            correct += (predicted == labels).sum().item()\n",
        "    return 100 * correct / total\n",
        "\n",
        "train_accuracy = calculate_accuracy(dataloaders['train'], model_ft)\n",
        "val_accuracy = calculate_accuracy(dataloaders['val'], model_ft)\n",
        "\n",
        "print(f\"Training accuracy: {train_accuracy:.2f}%\")\n",
        "print(f\"Validation accuracy: {val_accuracy:.2f}%\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1236
        },
        "id": "TKERWsrHgfbM",
        "outputId": "925797ae-a191-41b1-fc63-808810ed0ea8"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 0/9\n",
            "----------\n",
            "train Loss: 0.7074 Acc: 0.6680\n",
            "val Loss: 0.3195 Acc: 0.8627\n",
            "Epoch 1/9\n",
            "----------\n",
            "train Loss: 0.4839 Acc: 0.8238\n",
            "val Loss: 0.3115 Acc: 0.8889\n",
            "Epoch 2/9\n",
            "----------\n",
            "train Loss: 0.7328 Acc: 0.7418\n",
            "val Loss: 0.3387 Acc: 0.8824\n",
            "Epoch 3/9\n",
            "----------\n",
            "train Loss: 0.4729 Acc: 0.7869\n",
            "val Loss: 0.3117 Acc: 0.8693\n",
            "Epoch 4/9\n",
            "----------\n",
            "train Loss: 0.3686 Acc: 0.8443\n",
            "val Loss: 0.4337 Acc: 0.8039\n",
            "Epoch 5/9\n",
            "----------\n",
            "train Loss: 0.4993 Acc: 0.8074\n",
            "val Loss: 0.3724 Acc: 0.8824\n",
            "Epoch 6/9\n",
            "----------\n",
            "train Loss: 0.5287 Acc: 0.8074\n",
            "val Loss: 0.4628 Acc: 0.8562\n",
            "Epoch 7/9\n",
            "----------\n",
            "train Loss: 0.3491 Acc: 0.8484\n",
            "val Loss: 0.3345 Acc: 0.9020\n",
            "Epoch 8/9\n",
            "----------\n",
            "train Loss: 0.3859 Acc: 0.8689\n",
            "val Loss: 0.3652 Acc: 0.9020\n",
            "Epoch 9/9\n",
            "----------\n",
            "train Loss: 0.4298 Acc: 0.8443\n",
            "val Loss: 0.2786 Acc: 0.9216\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training accuracy: 95.90%\n",
            "Validation accuracy: 92.16%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "In this task, I applied transfer learning to classify images of bees and ants using a pre-trained ResNet18 model, originally trained on ImageNet. The model was fine-tuned on the hymenoptera dataset by replacing the final fully connected layer to output two classes (bees and ants). Data augmentation techniques, including random resizing and horizontal flipping, were used on the training images to enhance model robustness, while validation images were resized and center-cropped. The model was trained for 10 epochs, achieving a high training accuracy of 95.90% and a validation accuracy of 92.16%, indicating effective transfer learning for this binary classification task."
      ],
      "metadata": {
        "id": "o1lzCMmOmKxF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Use ResNet18 as a Feature Extractor"
      ],
      "metadata": {
        "id": "t0pHzT2RWqMp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "resnet18_fe = models.resnet18(pretrained=True)\n",
        "\n",
        "for param in resnet18_fe.parameters():\n",
        "  param.requires_grad = False\n",
        "\n",
        "num_ftrs = resnet18_fe.fc.in_features\n",
        "resnet18_fe.fc = nn.Linear(num_ftrs, 2)\n",
        "\n",
        "optimizer = optim.SGD(resnet18_fe.fc.parameters(), lr=0.001, momentum=0.9)\n",
        "model_fe, train_losses_fe, val_accuracies_fe= train_model(resnet18_fe, criterion, optimizer, exp_lr_scheduler,num_epochs=10)\n",
        "\n",
        "train_accuracy_fe = calculate_accuracy(dataloaders['train'], model_fe)\n",
        "val_accuracy_fe = calculate_accuracy(dataloaders['val'], model_fe)\n",
        "\n",
        "print(f\"Training accuracy (Feature Extractor): {train_accuracy_fe:.2f}%\")\n",
        "print(f\"Validation accuracy (Feature Extractor): {val_accuracy_fe:.2f}%\")\n",
        "\n",
        "# Plot Validation Accuracy for Feature Extraction\n",
        "plt.plot(val_accuracies_fe, label=\"Validation Accuracy (Feature Extraction)\")\n",
        "plt.xlabel(\"Epoch\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.title(\"Validation Accuracy (Feature Extraction)\")\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1326
        },
        "id": "dAygVaNZk8as",
        "outputId": "807cc2ce-f471-4f06-cdfd-9d02bfc9f317"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n",
            "  warnings.warn(msg)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 0/9\n",
            "----------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "train Loss: 0.7204 Acc: 0.6066\n",
            "val Loss: 0.4257 Acc: 0.7843\n",
            "Epoch 1/9\n",
            "----------\n",
            "train Loss: 0.7237 Acc: 0.6926\n",
            "val Loss: 0.1973 Acc: 0.9346\n",
            "Epoch 2/9\n",
            "----------\n",
            "train Loss: 0.5084 Acc: 0.7664\n",
            "val Loss: 0.3490 Acc: 0.8627\n",
            "Epoch 3/9\n",
            "----------\n",
            "train Loss: 0.5496 Acc: 0.7869\n",
            "val Loss: 0.1713 Acc: 0.9542\n",
            "Epoch 4/9\n",
            "----------\n",
            "train Loss: 0.4501 Acc: 0.8279\n",
            "val Loss: 0.2233 Acc: 0.9085\n",
            "Epoch 5/9\n",
            "----------\n",
            "train Loss: 0.4931 Acc: 0.7787\n",
            "val Loss: 0.1684 Acc: 0.9477\n",
            "Epoch 6/9\n",
            "----------\n",
            "train Loss: 0.4704 Acc: 0.8074\n",
            "val Loss: 0.1849 Acc: 0.9542\n",
            "Epoch 7/9\n",
            "----------\n",
            "train Loss: 0.4982 Acc: 0.8074\n",
            "val Loss: 0.2095 Acc: 0.9412\n",
            "Epoch 8/9\n",
            "----------\n",
            "train Loss: 0.7783 Acc: 0.7172\n",
            "val Loss: 0.2989 Acc: 0.8889\n",
            "Epoch 9/9\n",
            "----------\n",
            "train Loss: 0.4469 Acc: 0.8361\n",
            "val Loss: 0.2258 Acc: 0.9150\n",
            "Training accuracy (Feature Extractor): 91.39%\n",
            "Validation accuracy (Feature Extractor): 91.50%\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "In the feature extraction approach, the pre-trained ResNet18 model was adapted for the hymenoptera dataset by freezing all convolutional layers to retain learned representations from ImageNet. Only the final fully connected layer was modified and trained to classify the two target classes (bees and ants). This setup allowed the model to leverage its pre-trained feature extraction capabilities while updating only the final layer for the new classification task. After training for 10 epochs, the model achieved a training accuracy of 91.39% and a validation accuracy of 91.50%, demonstrating that using ResNet18 as a fixed feature extractor can effectively perform binary classification with minimal adjustment."
      ],
      "metadata": {
        "id": "O45XGtLpmcuT"
      }
    }
  ]
}